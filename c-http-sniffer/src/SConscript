#!/usr/bin/env python
import os, sys

def checkLibrary(path_list, name):
    fs = []
    for path in path_list:
        libname = os.path.join(path, 'lib'+name+'.*')
        fs.extend(Glob(libname))
    return True if len(fs)>0 else False

def printCheck(lib_path, libname):
    has = checkLibrary(lib_path, libname)
    print("Checking %s ... %s" % (libname, 'true' if has else 'false'))
    if not has:
        print("Error: please install %s first or check the installed path." % libname)
        sys.exit(-1)


# Set compiling environment
env = Environment(CC = 'g++', CCFLAGS="-Wall -fpermissive -w -g `pkg-config --cflags 'libprotobuf-c >= 1.0.0'`")
env.Append(LINKFLAGS=["`pkg-config --libs 'libprotobuf-c >= 1.0.0'`"])
env.Append(CXXFLAGS="-std=c++11")
lib_path = ['.', '/usr/local/lib', '/usr/lib', '/usr/lib/x86_64-linux-gnu/','home/2017/yhe54/json-c/.libc']
printCheck(lib_path, 'pthread')
printCheck(lib_path, 'pcap')
printCheck(lib_path, 'json-c')
libs = Glob('.[ao]') + ['pthread', 'pcap', 'json-c', 'rt']
cpp_path = ['../include', '../include/protocols', '../include/metrics', '../include/events', '/usr/include', '/usr/local/include']

 
# Flag debug to decide if NFM libs are used to compile program
# NFM is a network processor card driver to capture network traffic.
if int(ARGUMENTS.get('debug', 0)):
    print("NFM enabled.")
    nfm_libs = ['nfm', 'nfm_framework', 'nfm_error', 'nfm_packet', 
                'nfm_rules', 'nfm_platform', 'nfe', 'nfp']
    libs += nfm_libs
    lib_path.append('/opt/netronome/lib')
    cpp_path.append('/opt/netronome/nfm/include')


# Compile the programs
env.Program(target = '../bin/http-sniffer', 
            source = Glob('*/*.cpp') + Glob('*.cpp') + Glob('*.c'),
            LIBPATH = lib_path,
            LIBS = libs,
            CPPPATH = cpp_path)
