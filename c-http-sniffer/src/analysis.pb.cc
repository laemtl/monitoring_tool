// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analysis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "analysis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analysis {

namespace {

const ::google::protobuf::Descriptor* Init_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Init_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricValueMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricValueMsg_reflection_ = NULL;
struct MetricValueMsgOneofInstance {
  const ::analysis::MetricAvgMsg* metricavg_;
  const ::analysis::MetricCumDistrMsg* metriccumdistr_;
}* MetricValueMsg_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* MetricAvgMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricAvgMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Freq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Freq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricCumDistrMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricCumDistrMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Close_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Close_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_analysis_2eproto() {
  protobuf_AddDesc_analysis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "analysis.proto");
  GOOGLE_CHECK(file != NULL);
  Init_descriptor_ = file->message_type(0);
  static const int Init_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, netint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, activemetric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, clientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, clientport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, serverport_),
  };
  Init_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Init_descriptor_,
      Init::default_instance_,
      Init_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Init, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Init));
  Metrics_descriptor_ = file->message_type(1);
  static const int Metrics_offsets_[1] = {
  };
  Metrics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metrics_descriptor_,
      Metrics::default_instance_,
      Metrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metrics));
  MetricValueMsg_descriptor_ = file->message_type(2);
  static const int MetricValueMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricValueMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricValueMsg, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricValueMsg, netint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricValueMsg, clientid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MetricValueMsg_default_oneof_instance_, metricavg_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MetricValueMsg_default_oneof_instance_, metriccumdistr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricValueMsg, values_),
  };
  MetricValueMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricValueMsg_descriptor_,
      MetricValueMsg::default_instance_,
      MetricValueMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricValueMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricValueMsg, _unknown_fields_),
      -1,
      MetricValueMsg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricValueMsg, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricValueMsg));
  MetricAvgMsg_descriptor_ = file->message_type(3);
  static const int MetricAvgMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricAvgMsg, avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricAvgMsg, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricAvgMsg, max_),
  };
  MetricAvgMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricAvgMsg_descriptor_,
      MetricAvgMsg::default_instance_,
      MetricAvgMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricAvgMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricAvgMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricAvgMsg));
  Freq_descriptor_ = file->message_type(4);
  static const int Freq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Freq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Freq, freq_),
  };
  Freq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Freq_descriptor_,
      Freq::default_instance_,
      Freq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Freq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Freq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Freq));
  MetricCumDistrMsg_descriptor_ = file->message_type(5);
  static const int MetricCumDistrMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricCumDistrMsg, freqs_),
  };
  MetricCumDistrMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricCumDistrMsg_descriptor_,
      MetricCumDistrMsg::default_instance_,
      MetricCumDistrMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricCumDistrMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricCumDistrMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricCumDistrMsg));
  Close_descriptor_ = file->message_type(6);
  static const int Close_offsets_[1] = {
  };
  Close_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Close_descriptor_,
      Close::default_instance_,
      Close_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Close));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_analysis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Init_descriptor_, &Init::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metrics_descriptor_, &Metrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricValueMsg_descriptor_, &MetricValueMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricAvgMsg_descriptor_, &MetricAvgMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Freq_descriptor_, &Freq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricCumDistrMsg_descriptor_, &MetricCumDistrMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Close_descriptor_, &Close::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_analysis_2eproto() {
  delete Init::default_instance_;
  delete Init_reflection_;
  delete Metrics::default_instance_;
  delete Metrics_reflection_;
  delete MetricValueMsg::default_instance_;
  delete MetricValueMsg_default_oneof_instance_;
  delete MetricValueMsg_reflection_;
  delete MetricAvgMsg::default_instance_;
  delete MetricAvgMsg_reflection_;
  delete Freq::default_instance_;
  delete Freq_reflection_;
  delete MetricCumDistrMsg::default_instance_;
  delete MetricCumDistrMsg_reflection_;
  delete Close::default_instance_;
  delete Close_reflection_;
}

void protobuf_AddDesc_analysis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016analysis.proto\022\010analysis\"\234\001\n\004Init\022\016\n\006n"
    "etInt\030\001 \003(\t\022\020\n\010interval\030\002 \002(\r\022\020\n\010duratio"
    "n\030\003 \002(\r\022\024\n\014activeMetric\030\005 \002(\r\022\020\n\010clientI"
    "P\030\006 \001(\r\022\022\n\nclientPort\030\007 \001(\r\022\020\n\010serverIP\030"
    "\010 \001(\r\022\022\n\nserverPort\030\t \001(\r\"\t\n\007Metrics\"\274\001\n"
    "\016MetricValueMsg\022\014\n\004name\030\001 \002(\t\022\014\n\004time\030\002 "
    "\002(\003\022\016\n\006netInt\030\003 \002(\t\022\020\n\010clientId\030\004 \002(\003\022+\n"
    "\tmetricAvg\030\005 \001(\0132\026.analysis.MetricAvgMsg"
    "H\000\0225\n\016metricCumDistr\030\006 \001(\0132\033.analysis.Me"
    "tricCumDistrMsgH\000B\010\n\006values\"5\n\014MetricAvg"
    "Msg\022\013\n\003avg\030\005 \002(\001\022\013\n\003min\030\006 \002(\001\022\013\n\003max\030\007 \002"
    "(\001\"\"\n\004Freq\022\014\n\004name\030\001 \002(\t\022\014\n\004freq\030\002 \002(\001\"2"
    "\n\021MetricCumDistrMsg\022\035\n\005freqs\030\001 \003(\0132\016.ana"
    "lysis.Freq\"\007\n\005Close", 539);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "analysis.proto", &protobuf_RegisterTypes);
  Init::default_instance_ = new Init();
  Metrics::default_instance_ = new Metrics();
  MetricValueMsg::default_instance_ = new MetricValueMsg();
  MetricValueMsg_default_oneof_instance_ = new MetricValueMsgOneofInstance;
  MetricAvgMsg::default_instance_ = new MetricAvgMsg();
  Freq::default_instance_ = new Freq();
  MetricCumDistrMsg::default_instance_ = new MetricCumDistrMsg();
  Close::default_instance_ = new Close();
  Init::default_instance_->InitAsDefaultInstance();
  Metrics::default_instance_->InitAsDefaultInstance();
  MetricValueMsg::default_instance_->InitAsDefaultInstance();
  MetricAvgMsg::default_instance_->InitAsDefaultInstance();
  Freq::default_instance_->InitAsDefaultInstance();
  MetricCumDistrMsg::default_instance_->InitAsDefaultInstance();
  Close::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_analysis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_analysis_2eproto {
  StaticDescriptorInitializer_analysis_2eproto() {
    protobuf_AddDesc_analysis_2eproto();
  }
} static_descriptor_initializer_analysis_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Init::kNetIntFieldNumber;
const int Init::kIntervalFieldNumber;
const int Init::kDurationFieldNumber;
const int Init::kActiveMetricFieldNumber;
const int Init::kClientIPFieldNumber;
const int Init::kClientPortFieldNumber;
const int Init::kServerIPFieldNumber;
const int Init::kServerPortFieldNumber;
#endif  // !_MSC_VER

Init::Init()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis.Init)
}

void Init::InitAsDefaultInstance() {
}

Init::Init(const Init& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analysis.Init)
}

void Init::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interval_ = 0u;
  duration_ = 0u;
  activemetric_ = 0u;
  clientip_ = 0u;
  clientport_ = 0u;
  serverip_ = 0u;
  serverport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Init::~Init() {
  // @@protoc_insertion_point(destructor:analysis.Init)
  SharedDtor();
}

void Init::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Init::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Init::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Init_descriptor_;
}

const Init& Init::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analysis_2eproto();
  return *default_instance_;
}

Init* Init::default_instance_ = NULL;

Init* Init::New() const {
  return new Init;
}

void Init::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Init*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(interval_, serverport_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  netint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis.Init)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string netInt = 1;
      case 1: {
        if (tag == 10) {
         parse_netInt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_netint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netint(this->netint_size() - 1).data(),
            this->netint(this->netint_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_netInt;
        if (input->ExpectTag(16)) goto parse_interval;
        break;
      }

      // required uint32 interval = 2;
      case 2: {
        if (tag == 16) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // required uint32 duration = 3;
      case 3: {
        if (tag == 24) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_activeMetric;
        break;
      }

      // required uint32 activeMetric = 5;
      case 5: {
        if (tag == 40) {
         parse_activeMetric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activemetric_)));
          set_has_activemetric();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_clientIP;
        break;
      }

      // optional uint32 clientIP = 6;
      case 6: {
        if (tag == 48) {
         parse_clientIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientip_)));
          set_has_clientip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_clientPort;
        break;
      }

      // optional uint32 clientPort = 7;
      case 7: {
        if (tag == 56) {
         parse_clientPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientport_)));
          set_has_clientport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_serverIP;
        break;
      }

      // optional uint32 serverIP = 8;
      case 8: {
        if (tag == 64) {
         parse_serverIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverip_)));
          set_has_serverip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_serverPort;
        break;
      }

      // optional uint32 serverPort = 9;
      case 9: {
        if (tag == 72) {
         parse_serverPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverport_)));
          set_has_serverport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis.Init)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis.Init)
  return false;
#undef DO_
}

void Init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis.Init)
  // repeated string netInt = 1;
  for (int i = 0; i < this->netint_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->netint(i).data(), this->netint(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "netint");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->netint(i), output);
  }

  // required uint32 interval = 2;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->interval(), output);
  }

  // required uint32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // required uint32 activeMetric = 5;
  if (has_activemetric()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->activemetric(), output);
  }

  // optional uint32 clientIP = 6;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->clientip(), output);
  }

  // optional uint32 clientPort = 7;
  if (has_clientport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->clientport(), output);
  }

  // optional uint32 serverIP = 8;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->serverip(), output);
  }

  // optional uint32 serverPort = 9;
  if (has_serverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->serverport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis.Init)
}

::google::protobuf::uint8* Init::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis.Init)
  // repeated string netInt = 1;
  for (int i = 0; i < this->netint_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netint(i).data(), this->netint(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netint");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->netint(i), target);
  }

  // required uint32 interval = 2;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->interval(), target);
  }

  // required uint32 duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // required uint32 activeMetric = 5;
  if (has_activemetric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->activemetric(), target);
  }

  // optional uint32 clientIP = 6;
  if (has_clientip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->clientip(), target);
  }

  // optional uint32 clientPort = 7;
  if (has_clientport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->clientport(), target);
  }

  // optional uint32 serverIP = 8;
  if (has_serverip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->serverip(), target);
  }

  // optional uint32 serverPort = 9;
  if (has_serverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->serverport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis.Init)
  return target;
}

int Init::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 interval = 2;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

    // required uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // required uint32 activeMetric = 5;
    if (has_activemetric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activemetric());
    }

    // optional uint32 clientIP = 6;
    if (has_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientip());
    }

    // optional uint32 clientPort = 7;
    if (has_clientport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientport());
    }

    // optional uint32 serverIP = 8;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverip());
    }

    // optional uint32 serverPort = 9;
    if (has_serverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverport());
    }

  }
  // repeated string netInt = 1;
  total_size += 1 * this->netint_size();
  for (int i = 0; i < this->netint_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->netint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Init::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Init* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Init*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Init::MergeFrom(const Init& from) {
  GOOGLE_CHECK_NE(&from, this);
  netint_.MergeFrom(from.netint_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_activemetric()) {
      set_activemetric(from.activemetric());
    }
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
    if (from.has_clientport()) {
      set_clientport(from.clientport());
    }
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_serverport()) {
      set_serverport(from.serverport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Init::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Init::CopyFrom(const Init& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Init::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void Init::Swap(Init* other) {
  if (other != this) {
    netint_.Swap(&other->netint_);
    std::swap(interval_, other->interval_);
    std::swap(duration_, other->duration_);
    std::swap(activemetric_, other->activemetric_);
    std::swap(clientip_, other->clientip_);
    std::swap(clientport_, other->clientport_);
    std::swap(serverip_, other->serverip_);
    std::swap(serverport_, other->serverport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Init::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Init_descriptor_;
  metadata.reflection = Init_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Metrics::Metrics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis.Metrics)
}

void Metrics::InitAsDefaultInstance() {
}

Metrics::Metrics(const Metrics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analysis.Metrics)
}

void Metrics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:analysis.Metrics)
  SharedDtor();
}

void Metrics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metrics_descriptor_;
}

const Metrics& Metrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analysis_2eproto();
  return *default_instance_;
}

Metrics* Metrics::default_instance_ = NULL;

Metrics* Metrics::New() const {
  return new Metrics;
}

void Metrics::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis.Metrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:analysis.Metrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis.Metrics)
  return false;
#undef DO_
}

void Metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis.Metrics)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis.Metrics)
}

::google::protobuf::uint8* Metrics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis.Metrics)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis.Metrics)
  return target;
}

int Metrics::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metrics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metrics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metrics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metrics::MergeFrom(const Metrics& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metrics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics::CopyFrom(const Metrics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {

  return true;
}

void Metrics::Swap(Metrics* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metrics_descriptor_;
  metadata.reflection = Metrics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetricValueMsg::kNameFieldNumber;
const int MetricValueMsg::kTimeFieldNumber;
const int MetricValueMsg::kNetIntFieldNumber;
const int MetricValueMsg::kClientIdFieldNumber;
const int MetricValueMsg::kMetricAvgFieldNumber;
const int MetricValueMsg::kMetricCumDistrFieldNumber;
#endif  // !_MSC_VER

MetricValueMsg::MetricValueMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis.MetricValueMsg)
}

void MetricValueMsg::InitAsDefaultInstance() {
  MetricValueMsg_default_oneof_instance_->metricavg_ = const_cast< ::analysis::MetricAvgMsg*>(&::analysis::MetricAvgMsg::default_instance());
  MetricValueMsg_default_oneof_instance_->metriccumdistr_ = const_cast< ::analysis::MetricCumDistrMsg*>(&::analysis::MetricCumDistrMsg::default_instance());
}

MetricValueMsg::MetricValueMsg(const MetricValueMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analysis.MetricValueMsg)
}

void MetricValueMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  netint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_values();
}

MetricValueMsg::~MetricValueMsg() {
  // @@protoc_insertion_point(destructor:analysis.MetricValueMsg)
  SharedDtor();
}

void MetricValueMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (netint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netint_;
  }
  if (has_values()) {
    clear_values();
  }
  if (this != default_instance_) {
  }
}

void MetricValueMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricValueMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricValueMsg_descriptor_;
}

const MetricValueMsg& MetricValueMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analysis_2eproto();
  return *default_instance_;
}

MetricValueMsg* MetricValueMsg::default_instance_ = NULL;

MetricValueMsg* MetricValueMsg::New() const {
  return new MetricValueMsg;
}

void MetricValueMsg::clear_values() {
  switch(values_case()) {
    case kMetricAvg: {
      delete values_.metricavg_;
      break;
    }
    case kMetricCumDistr: {
      delete values_.metriccumdistr_;
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUES_NOT_SET;
}


void MetricValueMsg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    if (has_netint()) {
      if (netint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netint_->clear();
      }
    }
    clientid_ = GOOGLE_LONGLONG(0);
  }
  clear_values();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricValueMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis.MetricValueMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_netInt;
        break;
      }

      // required string netInt = 3;
      case 3: {
        if (tag == 26) {
         parse_netInt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netint().data(), this->netint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_clientId;
        break;
      }

      // required int64 clientId = 4;
      case 4: {
        if (tag == 32) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_metricAvg;
        break;
      }

      // optional .analysis.MetricAvgMsg metricAvg = 5;
      case 5: {
        if (tag == 42) {
         parse_metricAvg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metricavg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_metricCumDistr;
        break;
      }

      // optional .analysis.MetricCumDistrMsg metricCumDistr = 6;
      case 6: {
        if (tag == 50) {
         parse_metricCumDistr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metriccumdistr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis.MetricValueMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis.MetricValueMsg)
  return false;
#undef DO_
}

void MetricValueMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis.MetricValueMsg)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // required string netInt = 3;
  if (has_netint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netint().data(), this->netint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->netint(), output);
  }

  // required int64 clientId = 4;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->clientid(), output);
  }

  // optional .analysis.MetricAvgMsg metricAvg = 5;
  if (has_metricavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->metricavg(), output);
  }

  // optional .analysis.MetricCumDistrMsg metricCumDistr = 6;
  if (has_metriccumdistr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->metriccumdistr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis.MetricValueMsg)
}

::google::protobuf::uint8* MetricValueMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis.MetricValueMsg)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // required string netInt = 3;
  if (has_netint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netint().data(), this->netint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->netint(), target);
  }

  // required int64 clientId = 4;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->clientid(), target);
  }

  // optional .analysis.MetricAvgMsg metricAvg = 5;
  if (has_metricavg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->metricavg(), target);
  }

  // optional .analysis.MetricCumDistrMsg metricCumDistr = 6;
  if (has_metriccumdistr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->metriccumdistr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis.MetricValueMsg)
  return target;
}

int MetricValueMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required string netInt = 3;
    if (has_netint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netint());
    }

    // required int64 clientId = 4;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientid());
    }

  }
  switch (values_case()) {
    // optional .analysis.MetricAvgMsg metricAvg = 5;
    case kMetricAvg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metricavg());
      break;
    }
    // optional .analysis.MetricCumDistrMsg metricCumDistr = 6;
    case kMetricCumDistr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metriccumdistr());
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricValueMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricValueMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricValueMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricValueMsg::MergeFrom(const MetricValueMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.values_case()) {
    case kMetricAvg: {
      mutable_metricavg()->::analysis::MetricAvgMsg::MergeFrom(from.metricavg());
      break;
    }
    case kMetricCumDistr: {
      mutable_metriccumdistr()->::analysis::MetricCumDistrMsg::MergeFrom(from.metriccumdistr());
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_netint()) {
      set_netint(from.netint());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricValueMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricValueMsg::CopyFrom(const MetricValueMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricValueMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_metricavg()) {
    if (!this->metricavg().IsInitialized()) return false;
  }
  if (has_metriccumdistr()) {
    if (!this->metriccumdistr().IsInitialized()) return false;
  }
  return true;
}

void MetricValueMsg::Swap(MetricValueMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(netint_, other->netint_);
    std::swap(clientid_, other->clientid_);
    std::swap(values_, other->values_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricValueMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricValueMsg_descriptor_;
  metadata.reflection = MetricValueMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetricAvgMsg::kAvgFieldNumber;
const int MetricAvgMsg::kMinFieldNumber;
const int MetricAvgMsg::kMaxFieldNumber;
#endif  // !_MSC_VER

MetricAvgMsg::MetricAvgMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis.MetricAvgMsg)
}

void MetricAvgMsg::InitAsDefaultInstance() {
}

MetricAvgMsg::MetricAvgMsg(const MetricAvgMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analysis.MetricAvgMsg)
}

void MetricAvgMsg::SharedCtor() {
  _cached_size_ = 0;
  avg_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricAvgMsg::~MetricAvgMsg() {
  // @@protoc_insertion_point(destructor:analysis.MetricAvgMsg)
  SharedDtor();
}

void MetricAvgMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetricAvgMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricAvgMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricAvgMsg_descriptor_;
}

const MetricAvgMsg& MetricAvgMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analysis_2eproto();
  return *default_instance_;
}

MetricAvgMsg* MetricAvgMsg::default_instance_ = NULL;

MetricAvgMsg* MetricAvgMsg::New() const {
  return new MetricAvgMsg;
}

void MetricAvgMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MetricAvgMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(avg_, max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricAvgMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis.MetricAvgMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double avg = 5;
      case 5: {
        if (tag == 41) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_)));
          set_has_avg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_min;
        break;
      }

      // required double min = 6;
      case 6: {
        if (tag == 49) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_max;
        break;
      }

      // required double max = 7;
      case 7: {
        if (tag == 57) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis.MetricAvgMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis.MetricAvgMsg)
  return false;
#undef DO_
}

void MetricAvgMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis.MetricAvgMsg)
  // required double avg = 5;
  if (has_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->avg(), output);
  }

  // required double min = 6;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min(), output);
  }

  // required double max = 7;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis.MetricAvgMsg)
}

::google::protobuf::uint8* MetricAvgMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis.MetricAvgMsg)
  // required double avg = 5;
  if (has_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->avg(), target);
  }

  // required double min = 6;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min(), target);
  }

  // required double max = 7;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis.MetricAvgMsg)
  return target;
}

int MetricAvgMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double avg = 5;
    if (has_avg()) {
      total_size += 1 + 8;
    }

    // required double min = 6;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // required double max = 7;
    if (has_max()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricAvgMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricAvgMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricAvgMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricAvgMsg::MergeFrom(const MetricAvgMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avg()) {
      set_avg(from.avg());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricAvgMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricAvgMsg::CopyFrom(const MetricAvgMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricAvgMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MetricAvgMsg::Swap(MetricAvgMsg* other) {
  if (other != this) {
    std::swap(avg_, other->avg_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricAvgMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricAvgMsg_descriptor_;
  metadata.reflection = MetricAvgMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Freq::kNameFieldNumber;
const int Freq::kFreqFieldNumber;
#endif  // !_MSC_VER

Freq::Freq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis.Freq)
}

void Freq::InitAsDefaultInstance() {
}

Freq::Freq(const Freq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analysis.Freq)
}

void Freq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Freq::~Freq() {
  // @@protoc_insertion_point(destructor:analysis.Freq)
  SharedDtor();
}

void Freq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Freq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Freq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Freq_descriptor_;
}

const Freq& Freq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analysis_2eproto();
  return *default_instance_;
}

Freq* Freq::default_instance_ = NULL;

Freq* Freq::New() const {
  return new Freq;
}

void Freq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    freq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Freq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis.Freq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_freq;
        break;
      }

      // required double freq = 2;
      case 2: {
        if (tag == 17) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis.Freq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis.Freq)
  return false;
#undef DO_
}

void Freq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis.Freq)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required double freq = 2;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->freq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis.Freq)
}

::google::protobuf::uint8* Freq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis.Freq)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double freq = 2;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->freq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis.Freq)
  return target;
}

int Freq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double freq = 2;
    if (has_freq()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Freq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Freq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Freq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Freq::MergeFrom(const Freq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Freq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Freq::CopyFrom(const Freq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Freq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Freq::Swap(Freq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(freq_, other->freq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Freq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Freq_descriptor_;
  metadata.reflection = Freq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetricCumDistrMsg::kFreqsFieldNumber;
#endif  // !_MSC_VER

MetricCumDistrMsg::MetricCumDistrMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis.MetricCumDistrMsg)
}

void MetricCumDistrMsg::InitAsDefaultInstance() {
}

MetricCumDistrMsg::MetricCumDistrMsg(const MetricCumDistrMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analysis.MetricCumDistrMsg)
}

void MetricCumDistrMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricCumDistrMsg::~MetricCumDistrMsg() {
  // @@protoc_insertion_point(destructor:analysis.MetricCumDistrMsg)
  SharedDtor();
}

void MetricCumDistrMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetricCumDistrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricCumDistrMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricCumDistrMsg_descriptor_;
}

const MetricCumDistrMsg& MetricCumDistrMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analysis_2eproto();
  return *default_instance_;
}

MetricCumDistrMsg* MetricCumDistrMsg::default_instance_ = NULL;

MetricCumDistrMsg* MetricCumDistrMsg::New() const {
  return new MetricCumDistrMsg;
}

void MetricCumDistrMsg::Clear() {
  freqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricCumDistrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis.MetricCumDistrMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .analysis.Freq freqs = 1;
      case 1: {
        if (tag == 10) {
         parse_freqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freqs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_freqs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis.MetricCumDistrMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis.MetricCumDistrMsg)
  return false;
#undef DO_
}

void MetricCumDistrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis.MetricCumDistrMsg)
  // repeated .analysis.Freq freqs = 1;
  for (int i = 0; i < this->freqs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->freqs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis.MetricCumDistrMsg)
}

::google::protobuf::uint8* MetricCumDistrMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis.MetricCumDistrMsg)
  // repeated .analysis.Freq freqs = 1;
  for (int i = 0; i < this->freqs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->freqs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis.MetricCumDistrMsg)
  return target;
}

int MetricCumDistrMsg::ByteSize() const {
  int total_size = 0;

  // repeated .analysis.Freq freqs = 1;
  total_size += 1 * this->freqs_size();
  for (int i = 0; i < this->freqs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freqs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricCumDistrMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricCumDistrMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricCumDistrMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricCumDistrMsg::MergeFrom(const MetricCumDistrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  freqs_.MergeFrom(from.freqs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricCumDistrMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricCumDistrMsg::CopyFrom(const MetricCumDistrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricCumDistrMsg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->freqs())) return false;
  return true;
}

void MetricCumDistrMsg::Swap(MetricCumDistrMsg* other) {
  if (other != this) {
    freqs_.Swap(&other->freqs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricCumDistrMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricCumDistrMsg_descriptor_;
  metadata.reflection = MetricCumDistrMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Close::Close()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis.Close)
}

void Close::InitAsDefaultInstance() {
}

Close::Close(const Close& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analysis.Close)
}

void Close::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:analysis.Close)
  SharedDtor();
}

void Close::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Close_descriptor_;
}

const Close& Close::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analysis_2eproto();
  return *default_instance_;
}

Close* Close::default_instance_ = NULL;

Close* Close::New() const {
  return new Close;
}

void Close::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:analysis.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis.Close)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis.Close)
}

::google::protobuf::uint8* Close::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis.Close)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis.Close)
  return target;
}

int Close::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Close* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Close*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {

  return true;
}

void Close::Swap(Close* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Close_descriptor_;
  metadata.reflection = Close_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace analysis

// @@protoc_insertion_point(global_scope)
