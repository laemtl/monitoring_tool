// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analysis.proto

#ifndef PROTOBUF_analysis_2eproto__INCLUDED
#define PROTOBUF_analysis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analysis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_analysis_2eproto();
void protobuf_AssignDesc_analysis_2eproto();
void protobuf_ShutdownFile_analysis_2eproto();

class Init;
class Metrics;
class MetricValueMsg;
class MetricAvgMsg;
class Freq;
class MetricCumDistrMsg;
class Close;

// ===================================================================

class Init : public ::google::protobuf::Message {
 public:
  Init();
  virtual ~Init();

  Init(const Init& from);

  inline Init& operator=(const Init& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Init& default_instance();

  void Swap(Init* other);

  // implements Message ----------------------------------------------

  Init* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Init& from);
  void MergeFrom(const Init& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string netInt = 1;
  inline int netint_size() const;
  inline void clear_netint();
  static const int kNetIntFieldNumber = 1;
  inline const ::std::string& netint(int index) const;
  inline ::std::string* mutable_netint(int index);
  inline void set_netint(int index, const ::std::string& value);
  inline void set_netint(int index, const char* value);
  inline void set_netint(int index, const char* value, size_t size);
  inline ::std::string* add_netint();
  inline void add_netint(const ::std::string& value);
  inline void add_netint(const char* value);
  inline void add_netint(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& netint() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_netint();

  // required uint32 interval = 2;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 2;
  inline ::google::protobuf::uint32 interval() const;
  inline void set_interval(::google::protobuf::uint32 value);

  // required uint32 duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline ::google::protobuf::uint32 duration() const;
  inline void set_duration(::google::protobuf::uint32 value);

  // required uint32 activeMetric = 5;
  inline bool has_activemetric() const;
  inline void clear_activemetric();
  static const int kActiveMetricFieldNumber = 5;
  inline ::google::protobuf::uint32 activemetric() const;
  inline void set_activemetric(::google::protobuf::uint32 value);

  // optional uint32 clientIP = 6;
  inline bool has_clientip() const;
  inline void clear_clientip();
  static const int kClientIPFieldNumber = 6;
  inline ::google::protobuf::uint32 clientip() const;
  inline void set_clientip(::google::protobuf::uint32 value);

  // optional uint32 clientPort = 7;
  inline bool has_clientport() const;
  inline void clear_clientport();
  static const int kClientPortFieldNumber = 7;
  inline ::google::protobuf::uint32 clientport() const;
  inline void set_clientport(::google::protobuf::uint32 value);

  // optional uint32 serverIP = 8;
  inline bool has_serverip() const;
  inline void clear_serverip();
  static const int kServerIPFieldNumber = 8;
  inline ::google::protobuf::uint32 serverip() const;
  inline void set_serverip(::google::protobuf::uint32 value);

  // optional uint32 serverPort = 9;
  inline bool has_serverport() const;
  inline void clear_serverport();
  static const int kServerPortFieldNumber = 9;
  inline ::google::protobuf::uint32 serverport() const;
  inline void set_serverport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:analysis.Init)
 private:
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_activemetric();
  inline void clear_has_activemetric();
  inline void set_has_clientip();
  inline void clear_has_clientip();
  inline void set_has_clientport();
  inline void clear_has_clientport();
  inline void set_has_serverip();
  inline void clear_has_serverip();
  inline void set_has_serverport();
  inline void clear_has_serverport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> netint_;
  ::google::protobuf::uint32 interval_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 activemetric_;
  ::google::protobuf::uint32 clientip_;
  ::google::protobuf::uint32 clientport_;
  ::google::protobuf::uint32 serverip_;
  ::google::protobuf::uint32 serverport_;
  friend void  protobuf_AddDesc_analysis_2eproto();
  friend void protobuf_AssignDesc_analysis_2eproto();
  friend void protobuf_ShutdownFile_analysis_2eproto();

  void InitAsDefaultInstance();
  static Init* default_instance_;
};
// -------------------------------------------------------------------

class Metrics : public ::google::protobuf::Message {
 public:
  Metrics();
  virtual ~Metrics();

  Metrics(const Metrics& from);

  inline Metrics& operator=(const Metrics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metrics& default_instance();

  void Swap(Metrics* other);

  // implements Message ----------------------------------------------

  Metrics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metrics& from);
  void MergeFrom(const Metrics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:analysis.Metrics)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_analysis_2eproto();
  friend void protobuf_AssignDesc_analysis_2eproto();
  friend void protobuf_ShutdownFile_analysis_2eproto();

  void InitAsDefaultInstance();
  static Metrics* default_instance_;
};
// -------------------------------------------------------------------

class MetricValueMsg : public ::google::protobuf::Message {
 public:
  MetricValueMsg();
  virtual ~MetricValueMsg();

  MetricValueMsg(const MetricValueMsg& from);

  inline MetricValueMsg& operator=(const MetricValueMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricValueMsg& default_instance();

  enum ValuesCase {
    kMetricAvg = 5,
    kMetricCumDistr = 6,
    VALUES_NOT_SET = 0,
  };

  void Swap(MetricValueMsg* other);

  // implements Message ----------------------------------------------

  MetricValueMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetricValueMsg& from);
  void MergeFrom(const MetricValueMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required string netInt = 3;
  inline bool has_netint() const;
  inline void clear_netint();
  static const int kNetIntFieldNumber = 3;
  inline const ::std::string& netint() const;
  inline void set_netint(const ::std::string& value);
  inline void set_netint(const char* value);
  inline void set_netint(const char* value, size_t size);
  inline ::std::string* mutable_netint();
  inline ::std::string* release_netint();
  inline void set_allocated_netint(::std::string* netint);

  // required int64 clientId = 4;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 4;
  inline ::google::protobuf::int64 clientid() const;
  inline void set_clientid(::google::protobuf::int64 value);

  // optional .analysis.MetricAvgMsg metricAvg = 5;
  inline bool has_metricavg() const;
  inline void clear_metricavg();
  static const int kMetricAvgFieldNumber = 5;
  inline const ::analysis::MetricAvgMsg& metricavg() const;
  inline ::analysis::MetricAvgMsg* mutable_metricavg();
  inline ::analysis::MetricAvgMsg* release_metricavg();
  inline void set_allocated_metricavg(::analysis::MetricAvgMsg* metricavg);

  // optional .analysis.MetricCumDistrMsg metricCumDistr = 6;
  inline bool has_metriccumdistr() const;
  inline void clear_metriccumdistr();
  static const int kMetricCumDistrFieldNumber = 6;
  inline const ::analysis::MetricCumDistrMsg& metriccumdistr() const;
  inline ::analysis::MetricCumDistrMsg* mutable_metriccumdistr();
  inline ::analysis::MetricCumDistrMsg* release_metriccumdistr();
  inline void set_allocated_metriccumdistr(::analysis::MetricCumDistrMsg* metriccumdistr);

  inline ValuesCase values_case() const;
  // @@protoc_insertion_point(class_scope:analysis.MetricValueMsg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_netint();
  inline void clear_has_netint();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_metricavg();
  inline void set_has_metriccumdistr();

  inline bool has_values();
  void clear_values();
  inline void clear_has_values();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int64 time_;
  ::std::string* netint_;
  ::google::protobuf::int64 clientid_;
  union ValuesUnion {
    ::analysis::MetricAvgMsg* metricavg_;
    ::analysis::MetricCumDistrMsg* metriccumdistr_;
  } values_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_analysis_2eproto();
  friend void protobuf_AssignDesc_analysis_2eproto();
  friend void protobuf_ShutdownFile_analysis_2eproto();

  void InitAsDefaultInstance();
  static MetricValueMsg* default_instance_;
};
// -------------------------------------------------------------------

class MetricAvgMsg : public ::google::protobuf::Message {
 public:
  MetricAvgMsg();
  virtual ~MetricAvgMsg();

  MetricAvgMsg(const MetricAvgMsg& from);

  inline MetricAvgMsg& operator=(const MetricAvgMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricAvgMsg& default_instance();

  void Swap(MetricAvgMsg* other);

  // implements Message ----------------------------------------------

  MetricAvgMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetricAvgMsg& from);
  void MergeFrom(const MetricAvgMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double avg = 5;
  inline bool has_avg() const;
  inline void clear_avg();
  static const int kAvgFieldNumber = 5;
  inline double avg() const;
  inline void set_avg(double value);

  // required double min = 6;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 6;
  inline double min() const;
  inline void set_min(double value);

  // required double max = 7;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 7;
  inline double max() const;
  inline void set_max(double value);

  // @@protoc_insertion_point(class_scope:analysis.MetricAvgMsg)
 private:
  inline void set_has_avg();
  inline void clear_has_avg();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double avg_;
  double min_;
  double max_;
  friend void  protobuf_AddDesc_analysis_2eproto();
  friend void protobuf_AssignDesc_analysis_2eproto();
  friend void protobuf_ShutdownFile_analysis_2eproto();

  void InitAsDefaultInstance();
  static MetricAvgMsg* default_instance_;
};
// -------------------------------------------------------------------

class Freq : public ::google::protobuf::Message {
 public:
  Freq();
  virtual ~Freq();

  Freq(const Freq& from);

  inline Freq& operator=(const Freq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Freq& default_instance();

  void Swap(Freq* other);

  // implements Message ----------------------------------------------

  Freq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Freq& from);
  void MergeFrom(const Freq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double freq = 2;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 2;
  inline double freq() const;
  inline void set_freq(double value);

  // @@protoc_insertion_point(class_scope:analysis.Freq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_freq();
  inline void clear_has_freq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  double freq_;
  friend void  protobuf_AddDesc_analysis_2eproto();
  friend void protobuf_AssignDesc_analysis_2eproto();
  friend void protobuf_ShutdownFile_analysis_2eproto();

  void InitAsDefaultInstance();
  static Freq* default_instance_;
};
// -------------------------------------------------------------------

class MetricCumDistrMsg : public ::google::protobuf::Message {
 public:
  MetricCumDistrMsg();
  virtual ~MetricCumDistrMsg();

  MetricCumDistrMsg(const MetricCumDistrMsg& from);

  inline MetricCumDistrMsg& operator=(const MetricCumDistrMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricCumDistrMsg& default_instance();

  void Swap(MetricCumDistrMsg* other);

  // implements Message ----------------------------------------------

  MetricCumDistrMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetricCumDistrMsg& from);
  void MergeFrom(const MetricCumDistrMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .analysis.Freq freqs = 1;
  inline int freqs_size() const;
  inline void clear_freqs();
  static const int kFreqsFieldNumber = 1;
  inline const ::analysis::Freq& freqs(int index) const;
  inline ::analysis::Freq* mutable_freqs(int index);
  inline ::analysis::Freq* add_freqs();
  inline const ::google::protobuf::RepeatedPtrField< ::analysis::Freq >&
      freqs() const;
  inline ::google::protobuf::RepeatedPtrField< ::analysis::Freq >*
      mutable_freqs();

  // @@protoc_insertion_point(class_scope:analysis.MetricCumDistrMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::analysis::Freq > freqs_;
  friend void  protobuf_AddDesc_analysis_2eproto();
  friend void protobuf_AssignDesc_analysis_2eproto();
  friend void protobuf_ShutdownFile_analysis_2eproto();

  void InitAsDefaultInstance();
  static MetricCumDistrMsg* default_instance_;
};
// -------------------------------------------------------------------

class Close : public ::google::protobuf::Message {
 public:
  Close();
  virtual ~Close();

  Close(const Close& from);

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Close& default_instance();

  void Swap(Close* other);

  // implements Message ----------------------------------------------

  Close* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:analysis.Close)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_analysis_2eproto();
  friend void protobuf_AssignDesc_analysis_2eproto();
  friend void protobuf_ShutdownFile_analysis_2eproto();

  void InitAsDefaultInstance();
  static Close* default_instance_;
};
// ===================================================================


// ===================================================================

// Init

// repeated string netInt = 1;
inline int Init::netint_size() const {
  return netint_.size();
}
inline void Init::clear_netint() {
  netint_.Clear();
}
inline const ::std::string& Init::netint(int index) const {
  // @@protoc_insertion_point(field_get:analysis.Init.netInt)
  return netint_.Get(index);
}
inline ::std::string* Init::mutable_netint(int index) {
  // @@protoc_insertion_point(field_mutable:analysis.Init.netInt)
  return netint_.Mutable(index);
}
inline void Init::set_netint(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:analysis.Init.netInt)
  netint_.Mutable(index)->assign(value);
}
inline void Init::set_netint(int index, const char* value) {
  netint_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:analysis.Init.netInt)
}
inline void Init::set_netint(int index, const char* value, size_t size) {
  netint_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:analysis.Init.netInt)
}
inline ::std::string* Init::add_netint() {
  return netint_.Add();
}
inline void Init::add_netint(const ::std::string& value) {
  netint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:analysis.Init.netInt)
}
inline void Init::add_netint(const char* value) {
  netint_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:analysis.Init.netInt)
}
inline void Init::add_netint(const char* value, size_t size) {
  netint_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:analysis.Init.netInt)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Init::netint() const {
  // @@protoc_insertion_point(field_list:analysis.Init.netInt)
  return netint_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Init::mutable_netint() {
  // @@protoc_insertion_point(field_mutable_list:analysis.Init.netInt)
  return &netint_;
}

// required uint32 interval = 2;
inline bool Init::has_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Init::set_has_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Init::clear_has_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Init::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
inline ::google::protobuf::uint32 Init::interval() const {
  // @@protoc_insertion_point(field_get:analysis.Init.interval)
  return interval_;
}
inline void Init::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
  // @@protoc_insertion_point(field_set:analysis.Init.interval)
}

// required uint32 duration = 3;
inline bool Init::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Init::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Init::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Init::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 Init::duration() const {
  // @@protoc_insertion_point(field_get:analysis.Init.duration)
  return duration_;
}
inline void Init::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:analysis.Init.duration)
}

// required uint32 activeMetric = 5;
inline bool Init::has_activemetric() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Init::set_has_activemetric() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Init::clear_has_activemetric() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Init::clear_activemetric() {
  activemetric_ = 0u;
  clear_has_activemetric();
}
inline ::google::protobuf::uint32 Init::activemetric() const {
  // @@protoc_insertion_point(field_get:analysis.Init.activeMetric)
  return activemetric_;
}
inline void Init::set_activemetric(::google::protobuf::uint32 value) {
  set_has_activemetric();
  activemetric_ = value;
  // @@protoc_insertion_point(field_set:analysis.Init.activeMetric)
}

// optional uint32 clientIP = 6;
inline bool Init::has_clientip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Init::set_has_clientip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Init::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Init::clear_clientip() {
  clientip_ = 0u;
  clear_has_clientip();
}
inline ::google::protobuf::uint32 Init::clientip() const {
  // @@protoc_insertion_point(field_get:analysis.Init.clientIP)
  return clientip_;
}
inline void Init::set_clientip(::google::protobuf::uint32 value) {
  set_has_clientip();
  clientip_ = value;
  // @@protoc_insertion_point(field_set:analysis.Init.clientIP)
}

// optional uint32 clientPort = 7;
inline bool Init::has_clientport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Init::set_has_clientport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Init::clear_has_clientport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Init::clear_clientport() {
  clientport_ = 0u;
  clear_has_clientport();
}
inline ::google::protobuf::uint32 Init::clientport() const {
  // @@protoc_insertion_point(field_get:analysis.Init.clientPort)
  return clientport_;
}
inline void Init::set_clientport(::google::protobuf::uint32 value) {
  set_has_clientport();
  clientport_ = value;
  // @@protoc_insertion_point(field_set:analysis.Init.clientPort)
}

// optional uint32 serverIP = 8;
inline bool Init::has_serverip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Init::set_has_serverip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Init::clear_has_serverip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Init::clear_serverip() {
  serverip_ = 0u;
  clear_has_serverip();
}
inline ::google::protobuf::uint32 Init::serverip() const {
  // @@protoc_insertion_point(field_get:analysis.Init.serverIP)
  return serverip_;
}
inline void Init::set_serverip(::google::protobuf::uint32 value) {
  set_has_serverip();
  serverip_ = value;
  // @@protoc_insertion_point(field_set:analysis.Init.serverIP)
}

// optional uint32 serverPort = 9;
inline bool Init::has_serverport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Init::set_has_serverport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Init::clear_has_serverport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Init::clear_serverport() {
  serverport_ = 0u;
  clear_has_serverport();
}
inline ::google::protobuf::uint32 Init::serverport() const {
  // @@protoc_insertion_point(field_get:analysis.Init.serverPort)
  return serverport_;
}
inline void Init::set_serverport(::google::protobuf::uint32 value) {
  set_has_serverport();
  serverport_ = value;
  // @@protoc_insertion_point(field_set:analysis.Init.serverPort)
}

// -------------------------------------------------------------------

// Metrics

// -------------------------------------------------------------------

// MetricValueMsg

// required string name = 1;
inline bool MetricValueMsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricValueMsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetricValueMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetricValueMsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MetricValueMsg::name() const {
  // @@protoc_insertion_point(field_get:analysis.MetricValueMsg.name)
  return *name_;
}
inline void MetricValueMsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:analysis.MetricValueMsg.name)
}
inline void MetricValueMsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:analysis.MetricValueMsg.name)
}
inline void MetricValueMsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:analysis.MetricValueMsg.name)
}
inline ::std::string* MetricValueMsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:analysis.MetricValueMsg.name)
  return name_;
}
inline ::std::string* MetricValueMsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MetricValueMsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:analysis.MetricValueMsg.name)
}

// required int64 time = 2;
inline bool MetricValueMsg::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetricValueMsg::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetricValueMsg::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetricValueMsg::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 MetricValueMsg::time() const {
  // @@protoc_insertion_point(field_get:analysis.MetricValueMsg.time)
  return time_;
}
inline void MetricValueMsg::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:analysis.MetricValueMsg.time)
}

// required string netInt = 3;
inline bool MetricValueMsg::has_netint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetricValueMsg::set_has_netint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetricValueMsg::clear_has_netint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetricValueMsg::clear_netint() {
  if (netint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netint_->clear();
  }
  clear_has_netint();
}
inline const ::std::string& MetricValueMsg::netint() const {
  // @@protoc_insertion_point(field_get:analysis.MetricValueMsg.netInt)
  return *netint_;
}
inline void MetricValueMsg::set_netint(const ::std::string& value) {
  set_has_netint();
  if (netint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netint_ = new ::std::string;
  }
  netint_->assign(value);
  // @@protoc_insertion_point(field_set:analysis.MetricValueMsg.netInt)
}
inline void MetricValueMsg::set_netint(const char* value) {
  set_has_netint();
  if (netint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netint_ = new ::std::string;
  }
  netint_->assign(value);
  // @@protoc_insertion_point(field_set_char:analysis.MetricValueMsg.netInt)
}
inline void MetricValueMsg::set_netint(const char* value, size_t size) {
  set_has_netint();
  if (netint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netint_ = new ::std::string;
  }
  netint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:analysis.MetricValueMsg.netInt)
}
inline ::std::string* MetricValueMsg::mutable_netint() {
  set_has_netint();
  if (netint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    netint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:analysis.MetricValueMsg.netInt)
  return netint_;
}
inline ::std::string* MetricValueMsg::release_netint() {
  clear_has_netint();
  if (netint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = netint_;
    netint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MetricValueMsg::set_allocated_netint(::std::string* netint) {
  if (netint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netint_;
  }
  if (netint) {
    set_has_netint();
    netint_ = netint;
  } else {
    clear_has_netint();
    netint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:analysis.MetricValueMsg.netInt)
}

// required int64 clientId = 4;
inline bool MetricValueMsg::has_clientid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MetricValueMsg::set_has_clientid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MetricValueMsg::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MetricValueMsg::clear_clientid() {
  clientid_ = GOOGLE_LONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::int64 MetricValueMsg::clientid() const {
  // @@protoc_insertion_point(field_get:analysis.MetricValueMsg.clientId)
  return clientid_;
}
inline void MetricValueMsg::set_clientid(::google::protobuf::int64 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:analysis.MetricValueMsg.clientId)
}

// optional .analysis.MetricAvgMsg metricAvg = 5;
inline bool MetricValueMsg::has_metricavg() const {
  return values_case() == kMetricAvg;
}
inline void MetricValueMsg::set_has_metricavg() {
  _oneof_case_[0] = kMetricAvg;
}
inline void MetricValueMsg::clear_metricavg() {
  if (has_metricavg()) {
    delete values_.metricavg_;
    clear_has_values();
  }
}
inline const ::analysis::MetricAvgMsg& MetricValueMsg::metricavg() const {
  return has_metricavg() ? *values_.metricavg_
                      : ::analysis::MetricAvgMsg::default_instance();
}
inline ::analysis::MetricAvgMsg* MetricValueMsg::mutable_metricavg() {
  if (!has_metricavg()) {
    clear_values();
    set_has_metricavg();
    values_.metricavg_ = new ::analysis::MetricAvgMsg;
  }
  return values_.metricavg_;
}
inline ::analysis::MetricAvgMsg* MetricValueMsg::release_metricavg() {
  if (has_metricavg()) {
    clear_has_values();
    ::analysis::MetricAvgMsg* temp = values_.metricavg_;
    values_.metricavg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MetricValueMsg::set_allocated_metricavg(::analysis::MetricAvgMsg* metricavg) {
  clear_values();
  if (metricavg) {
    set_has_metricavg();
    values_.metricavg_ = metricavg;
  }
}

// optional .analysis.MetricCumDistrMsg metricCumDistr = 6;
inline bool MetricValueMsg::has_metriccumdistr() const {
  return values_case() == kMetricCumDistr;
}
inline void MetricValueMsg::set_has_metriccumdistr() {
  _oneof_case_[0] = kMetricCumDistr;
}
inline void MetricValueMsg::clear_metriccumdistr() {
  if (has_metriccumdistr()) {
    delete values_.metriccumdistr_;
    clear_has_values();
  }
}
inline const ::analysis::MetricCumDistrMsg& MetricValueMsg::metriccumdistr() const {
  return has_metriccumdistr() ? *values_.metriccumdistr_
                      : ::analysis::MetricCumDistrMsg::default_instance();
}
inline ::analysis::MetricCumDistrMsg* MetricValueMsg::mutable_metriccumdistr() {
  if (!has_metriccumdistr()) {
    clear_values();
    set_has_metriccumdistr();
    values_.metriccumdistr_ = new ::analysis::MetricCumDistrMsg;
  }
  return values_.metriccumdistr_;
}
inline ::analysis::MetricCumDistrMsg* MetricValueMsg::release_metriccumdistr() {
  if (has_metriccumdistr()) {
    clear_has_values();
    ::analysis::MetricCumDistrMsg* temp = values_.metriccumdistr_;
    values_.metriccumdistr_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MetricValueMsg::set_allocated_metriccumdistr(::analysis::MetricCumDistrMsg* metriccumdistr) {
  clear_values();
  if (metriccumdistr) {
    set_has_metriccumdistr();
    values_.metriccumdistr_ = metriccumdistr;
  }
}

inline bool MetricValueMsg::has_values() {
  return values_case() != VALUES_NOT_SET;
}
inline void MetricValueMsg::clear_has_values() {
  _oneof_case_[0] = VALUES_NOT_SET;
}
inline MetricValueMsg::ValuesCase MetricValueMsg::values_case() const {
  return MetricValueMsg::ValuesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MetricAvgMsg

// required double avg = 5;
inline bool MetricAvgMsg::has_avg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricAvgMsg::set_has_avg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetricAvgMsg::clear_has_avg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetricAvgMsg::clear_avg() {
  avg_ = 0;
  clear_has_avg();
}
inline double MetricAvgMsg::avg() const {
  // @@protoc_insertion_point(field_get:analysis.MetricAvgMsg.avg)
  return avg_;
}
inline void MetricAvgMsg::set_avg(double value) {
  set_has_avg();
  avg_ = value;
  // @@protoc_insertion_point(field_set:analysis.MetricAvgMsg.avg)
}

// required double min = 6;
inline bool MetricAvgMsg::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetricAvgMsg::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetricAvgMsg::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetricAvgMsg::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double MetricAvgMsg::min() const {
  // @@protoc_insertion_point(field_get:analysis.MetricAvgMsg.min)
  return min_;
}
inline void MetricAvgMsg::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:analysis.MetricAvgMsg.min)
}

// required double max = 7;
inline bool MetricAvgMsg::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetricAvgMsg::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetricAvgMsg::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetricAvgMsg::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double MetricAvgMsg::max() const {
  // @@protoc_insertion_point(field_get:analysis.MetricAvgMsg.max)
  return max_;
}
inline void MetricAvgMsg::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:analysis.MetricAvgMsg.max)
}

// -------------------------------------------------------------------

// Freq

// required string name = 1;
inline bool Freq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Freq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Freq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Freq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Freq::name() const {
  // @@protoc_insertion_point(field_get:analysis.Freq.name)
  return *name_;
}
inline void Freq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:analysis.Freq.name)
}
inline void Freq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:analysis.Freq.name)
}
inline void Freq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:analysis.Freq.name)
}
inline ::std::string* Freq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:analysis.Freq.name)
  return name_;
}
inline ::std::string* Freq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Freq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:analysis.Freq.name)
}

// required double freq = 2;
inline bool Freq::has_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Freq::set_has_freq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Freq::clear_has_freq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Freq::clear_freq() {
  freq_ = 0;
  clear_has_freq();
}
inline double Freq::freq() const {
  // @@protoc_insertion_point(field_get:analysis.Freq.freq)
  return freq_;
}
inline void Freq::set_freq(double value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:analysis.Freq.freq)
}

// -------------------------------------------------------------------

// MetricCumDistrMsg

// repeated .analysis.Freq freqs = 1;
inline int MetricCumDistrMsg::freqs_size() const {
  return freqs_.size();
}
inline void MetricCumDistrMsg::clear_freqs() {
  freqs_.Clear();
}
inline const ::analysis::Freq& MetricCumDistrMsg::freqs(int index) const {
  // @@protoc_insertion_point(field_get:analysis.MetricCumDistrMsg.freqs)
  return freqs_.Get(index);
}
inline ::analysis::Freq* MetricCumDistrMsg::mutable_freqs(int index) {
  // @@protoc_insertion_point(field_mutable:analysis.MetricCumDistrMsg.freqs)
  return freqs_.Mutable(index);
}
inline ::analysis::Freq* MetricCumDistrMsg::add_freqs() {
  // @@protoc_insertion_point(field_add:analysis.MetricCumDistrMsg.freqs)
  return freqs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::analysis::Freq >&
MetricCumDistrMsg::freqs() const {
  // @@protoc_insertion_point(field_list:analysis.MetricCumDistrMsg.freqs)
  return freqs_;
}
inline ::google::protobuf::RepeatedPtrField< ::analysis::Freq >*
MetricCumDistrMsg::mutable_freqs() {
  // @@protoc_insertion_point(field_mutable_list:analysis.MetricCumDistrMsg.freqs)
  return &freqs_;
}

// -------------------------------------------------------------------

// Close


// @@protoc_insertion_point(namespace_scope)

}  // namespace analysis

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_analysis_2eproto__INCLUDED
