/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: analysis.proto */

#ifndef PROTOBUF_C_analysis_2eproto__INCLUDED
#define PROTOBUF_C_analysis_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Analysis__Init Analysis__Init;
typedef struct _Analysis__Data Analysis__Data;
typedef struct _Analysis__Freq Analysis__Freq;
typedef struct _Analysis__Close Analysis__Close;


/* --- enums --- */


/* --- messages --- */

struct  _Analysis__Init
{
  ProtobufCMessage base;
  size_t n_netint;
  char **netint;
  uint32_t interval;
  uint32_t duration;
  /*
   *required uint32 topClientCnt = 4;
   */
  uint32_t activemetric;
  protobuf_c_boolean has_clientip;
  uint32_t clientip;
  protobuf_c_boolean has_clientport;
  uint32_t clientport;
  protobuf_c_boolean has_serverip;
  uint32_t serverip;
  protobuf_c_boolean has_serverport;
  uint32_t serverport;
};
#define ANALYSIS__INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&analysis__init__descriptor) \
    , 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Analysis__Data
{
  ProtobufCMessage base;
  int64_t time;
  char *netint;
  protobuf_c_boolean has_rstavg;
  double rstavg;
  protobuf_c_boolean has_rstmin;
  double rstmin;
  protobuf_c_boolean has_rstmax;
  double rstmax;
  protobuf_c_boolean has_rstclient;
  double rstclient;
  protobuf_c_boolean has_errrate;
  double errrate;
  protobuf_c_boolean has_errratemin;
  double errratemin;
  protobuf_c_boolean has_errratemax;
  double errratemax;
  protobuf_c_boolean has_errrateclient;
  double errrateclient;
  protobuf_c_boolean has_reqrate;
  double reqrate;
  protobuf_c_boolean has_reqratemin;
  double reqratemin;
  protobuf_c_boolean has_reqratemax;
  double reqratemax;
  protobuf_c_boolean has_reqrateclient;
  double reqrateclient;
  protobuf_c_boolean has_connrate;
  double connrate;
  protobuf_c_boolean has_connratemin;
  double connratemin;
  protobuf_c_boolean has_connratemax;
  double connratemax;
  size_t n_client;
  Analysis__Freq **client;
  size_t n_req_path;
  Analysis__Freq **req_path;
  size_t n_req_method;
  Analysis__Freq **req_method;
  size_t n_req_type;
  Analysis__Freq **req_type;
  size_t n_rsp_status;
  Analysis__Freq **rsp_status;
  protobuf_c_boolean has_tpavg;
  double tpavg;
  protobuf_c_boolean has_tpmin;
  double tpmin;
  protobuf_c_boolean has_tpmax;
  double tpmax;
  protobuf_c_boolean has_tprevavg;
  double tprevavg;
  protobuf_c_boolean has_tprevmin;
  double tprevmin;
  protobuf_c_boolean has_tprevmax;
  double tprevmax;
};
#define ANALYSIS__DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&analysis__data__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Analysis__Freq
{
  ProtobufCMessage base;
  char *name;
  double freq;
};
#define ANALYSIS__FREQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&analysis__freq__descriptor) \
    , NULL, 0 }


struct  _Analysis__Close
{
  ProtobufCMessage base;
};
#define ANALYSIS__CLOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&analysis__close__descriptor) \
     }


/* Analysis__Init methods */
void   analysis__init__init
                     (Analysis__Init         *message);
size_t analysis__init__get_packed_size
                     (const Analysis__Init   *message);
size_t analysis__init__pack
                     (const Analysis__Init   *message,
                      uint8_t             *out);
size_t analysis__init__pack_to_buffer
                     (const Analysis__Init   *message,
                      ProtobufCBuffer     *buffer);
Analysis__Init *
       analysis__init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   analysis__init__free_unpacked
                     (Analysis__Init *message,
                      ProtobufCAllocator *allocator);
/* Analysis__Data methods */
void   analysis__data__init
                     (Analysis__Data         *message);
size_t analysis__data__get_packed_size
                     (const Analysis__Data   *message);
size_t analysis__data__pack
                     (const Analysis__Data   *message,
                      uint8_t             *out);
size_t analysis__data__pack_to_buffer
                     (const Analysis__Data   *message,
                      ProtobufCBuffer     *buffer);
Analysis__Data *
       analysis__data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   analysis__data__free_unpacked
                     (Analysis__Data *message,
                      ProtobufCAllocator *allocator);
/* Analysis__Freq methods */
void   analysis__freq__init
                     (Analysis__Freq         *message);
size_t analysis__freq__get_packed_size
                     (const Analysis__Freq   *message);
size_t analysis__freq__pack
                     (const Analysis__Freq   *message,
                      uint8_t             *out);
size_t analysis__freq__pack_to_buffer
                     (const Analysis__Freq   *message,
                      ProtobufCBuffer     *buffer);
Analysis__Freq *
       analysis__freq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   analysis__freq__free_unpacked
                     (Analysis__Freq *message,
                      ProtobufCAllocator *allocator);
/* Analysis__Close methods */
void   analysis__close__init
                     (Analysis__Close         *message);
size_t analysis__close__get_packed_size
                     (const Analysis__Close   *message);
size_t analysis__close__pack
                     (const Analysis__Close   *message,
                      uint8_t             *out);
size_t analysis__close__pack_to_buffer
                     (const Analysis__Close   *message,
                      ProtobufCBuffer     *buffer);
Analysis__Close *
       analysis__close__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   analysis__close__free_unpacked
                     (Analysis__Close *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Analysis__Init_Closure)
                 (const Analysis__Init *message,
                  void *closure_data);
typedef void (*Analysis__Data_Closure)
                 (const Analysis__Data *message,
                  void *closure_data);
typedef void (*Analysis__Freq_Closure)
                 (const Analysis__Freq *message,
                  void *closure_data);
typedef void (*Analysis__Close_Closure)
                 (const Analysis__Close *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor analysis__init__descriptor;
extern const ProtobufCMessageDescriptor analysis__data__descriptor;
extern const ProtobufCMessageDescriptor analysis__freq__descriptor;
extern const ProtobufCMessageDescriptor analysis__close__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_analysis_2eproto__INCLUDED */
