// This file is generated by rust-protobuf 2.6.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Init {
    // message fields
    interval: ::std::option::Option<u32>,
    duration: ::std::option::Option<u32>,
    netInt: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Init {
    fn default() -> &'a Init {
        <Init as ::protobuf::Message>::default_instance()
    }
}

impl Init {
    pub fn new() -> Init {
        ::std::default::Default::default()
    }

    // required uint32 interval = 1;


    pub fn get_interval(&self) -> u32 {
        self.interval.unwrap_or(0)
    }
    pub fn clear_interval(&mut self) {
        self.interval = ::std::option::Option::None;
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: u32) {
        self.interval = ::std::option::Option::Some(v);
    }

    // required uint32 duration = 2;


    pub fn get_duration(&self) -> u32 {
        self.duration.unwrap_or(0)
    }
    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u32) {
        self.duration = ::std::option::Option::Some(v);
    }

    // repeated string netInt = 3;


    pub fn get_netInt(&self) -> &[::std::string::String] {
        &self.netInt
    }
    pub fn clear_netInt(&mut self) {
        self.netInt.clear();
    }

    // Param is passed by value, moved
    pub fn set_netInt(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.netInt = v;
    }

    // Mutable pointer to the field.
    pub fn mut_netInt(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.netInt
    }

    // Take field
    pub fn take_netInt(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.netInt, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Init {
    fn is_initialized(&self) -> bool {
        if self.interval.is_none() {
            return false;
        }
        if self.duration.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.interval = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.duration = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.netInt)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.interval {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.netInt {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.interval {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.duration {
            os.write_uint32(2, v)?;
        }
        for v in &self.netInt {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Init {
        Init::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "interval",
                    |m: &Init| { &m.interval },
                    |m: &mut Init| { &mut m.interval },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "duration",
                    |m: &Init| { &m.duration },
                    |m: &mut Init| { &mut m.duration },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "netInt",
                    |m: &Init| { &m.netInt },
                    |m: &mut Init| { &mut m.netInt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Init>(
                    "Init",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Init {
        static mut instance: ::protobuf::lazy::Lazy<Init> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Init,
        };
        unsafe {
            instance.get(Init::new)
        }
    }
}

impl ::protobuf::Clear for Init {
    fn clear(&mut self) {
        self.interval = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.netInt.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Init {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Init {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Data {
    // message fields
    time: ::std::option::Option<i64>,
    netInt: ::protobuf::SingularField<::std::string::String>,
    rstAvg: ::std::option::Option<f64>,
    rstMin: ::std::option::Option<f64>,
    rstMax: ::std::option::Option<f64>,
    rstClient: ::std::option::Option<f64>,
    tp: ::std::option::Option<f64>,
    errRate: ::std::option::Option<f64>,
    errRateMin: ::std::option::Option<f64>,
    errRateMax: ::std::option::Option<f64>,
    errRateClient: ::std::option::Option<f64>,
    reqRate: ::std::option::Option<f64>,
    reqRateMin: ::std::option::Option<f64>,
    reqRateMax: ::std::option::Option<f64>,
    reqRateClient: ::std::option::Option<f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    // required int64 time = 1;


    pub fn get_time(&self) -> i64 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i64) {
        self.time = ::std::option::Option::Some(v);
    }

    // required string netInt = 2;


    pub fn get_netInt(&self) -> &str {
        match self.netInt.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_netInt(&mut self) {
        self.netInt.clear();
    }

    pub fn has_netInt(&self) -> bool {
        self.netInt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_netInt(&mut self, v: ::std::string::String) {
        self.netInt = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_netInt(&mut self) -> &mut ::std::string::String {
        if self.netInt.is_none() {
            self.netInt.set_default();
        }
        self.netInt.as_mut().unwrap()
    }

    // Take field
    pub fn take_netInt(&mut self) -> ::std::string::String {
        self.netInt.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional double rstAvg = 3;


    pub fn get_rstAvg(&self) -> f64 {
        self.rstAvg.unwrap_or(0.)
    }
    pub fn clear_rstAvg(&mut self) {
        self.rstAvg = ::std::option::Option::None;
    }

    pub fn has_rstAvg(&self) -> bool {
        self.rstAvg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rstAvg(&mut self, v: f64) {
        self.rstAvg = ::std::option::Option::Some(v);
    }

    // optional double rstMin = 4;


    pub fn get_rstMin(&self) -> f64 {
        self.rstMin.unwrap_or(0.)
    }
    pub fn clear_rstMin(&mut self) {
        self.rstMin = ::std::option::Option::None;
    }

    pub fn has_rstMin(&self) -> bool {
        self.rstMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rstMin(&mut self, v: f64) {
        self.rstMin = ::std::option::Option::Some(v);
    }

    // optional double rstMax = 5;


    pub fn get_rstMax(&self) -> f64 {
        self.rstMax.unwrap_or(0.)
    }
    pub fn clear_rstMax(&mut self) {
        self.rstMax = ::std::option::Option::None;
    }

    pub fn has_rstMax(&self) -> bool {
        self.rstMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rstMax(&mut self, v: f64) {
        self.rstMax = ::std::option::Option::Some(v);
    }

    // optional double rstClient = 6;


    pub fn get_rstClient(&self) -> f64 {
        self.rstClient.unwrap_or(0.)
    }
    pub fn clear_rstClient(&mut self) {
        self.rstClient = ::std::option::Option::None;
    }

    pub fn has_rstClient(&self) -> bool {
        self.rstClient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rstClient(&mut self, v: f64) {
        self.rstClient = ::std::option::Option::Some(v);
    }

    // optional double tp = 7;


    pub fn get_tp(&self) -> f64 {
        self.tp.unwrap_or(0.)
    }
    pub fn clear_tp(&mut self) {
        self.tp = ::std::option::Option::None;
    }

    pub fn has_tp(&self) -> bool {
        self.tp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tp(&mut self, v: f64) {
        self.tp = ::std::option::Option::Some(v);
    }

    // optional double errRate = 8;


    pub fn get_errRate(&self) -> f64 {
        self.errRate.unwrap_or(0.)
    }
    pub fn clear_errRate(&mut self) {
        self.errRate = ::std::option::Option::None;
    }

    pub fn has_errRate(&self) -> bool {
        self.errRate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errRate(&mut self, v: f64) {
        self.errRate = ::std::option::Option::Some(v);
    }

    // optional double errRateMin = 9;


    pub fn get_errRateMin(&self) -> f64 {
        self.errRateMin.unwrap_or(0.)
    }
    pub fn clear_errRateMin(&mut self) {
        self.errRateMin = ::std::option::Option::None;
    }

    pub fn has_errRateMin(&self) -> bool {
        self.errRateMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errRateMin(&mut self, v: f64) {
        self.errRateMin = ::std::option::Option::Some(v);
    }

    // optional double errRateMax = 10;


    pub fn get_errRateMax(&self) -> f64 {
        self.errRateMax.unwrap_or(0.)
    }
    pub fn clear_errRateMax(&mut self) {
        self.errRateMax = ::std::option::Option::None;
    }

    pub fn has_errRateMax(&self) -> bool {
        self.errRateMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errRateMax(&mut self, v: f64) {
        self.errRateMax = ::std::option::Option::Some(v);
    }

    // optional double errRateClient = 11;


    pub fn get_errRateClient(&self) -> f64 {
        self.errRateClient.unwrap_or(0.)
    }
    pub fn clear_errRateClient(&mut self) {
        self.errRateClient = ::std::option::Option::None;
    }

    pub fn has_errRateClient(&self) -> bool {
        self.errRateClient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errRateClient(&mut self, v: f64) {
        self.errRateClient = ::std::option::Option::Some(v);
    }

    // optional double reqRate = 12;


    pub fn get_reqRate(&self) -> f64 {
        self.reqRate.unwrap_or(0.)
    }
    pub fn clear_reqRate(&mut self) {
        self.reqRate = ::std::option::Option::None;
    }

    pub fn has_reqRate(&self) -> bool {
        self.reqRate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqRate(&mut self, v: f64) {
        self.reqRate = ::std::option::Option::Some(v);
    }

    // optional double reqRateMin = 13;


    pub fn get_reqRateMin(&self) -> f64 {
        self.reqRateMin.unwrap_or(0.)
    }
    pub fn clear_reqRateMin(&mut self) {
        self.reqRateMin = ::std::option::Option::None;
    }

    pub fn has_reqRateMin(&self) -> bool {
        self.reqRateMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqRateMin(&mut self, v: f64) {
        self.reqRateMin = ::std::option::Option::Some(v);
    }

    // optional double reqRateMax = 14;


    pub fn get_reqRateMax(&self) -> f64 {
        self.reqRateMax.unwrap_or(0.)
    }
    pub fn clear_reqRateMax(&mut self) {
        self.reqRateMax = ::std::option::Option::None;
    }

    pub fn has_reqRateMax(&self) -> bool {
        self.reqRateMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqRateMax(&mut self, v: f64) {
        self.reqRateMax = ::std::option::Option::Some(v);
    }

    // optional double reqRateClient = 15;


    pub fn get_reqRateClient(&self) -> f64 {
        self.reqRateClient.unwrap_or(0.)
    }
    pub fn clear_reqRateClient(&mut self) {
        self.reqRateClient = ::std::option::Option::None;
    }

    pub fn has_reqRateClient(&self) -> bool {
        self.reqRateClient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqRateClient(&mut self, v: f64) {
        self.reqRateClient = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Data {
    fn is_initialized(&self) -> bool {
        if self.time.is_none() {
            return false;
        }
        if self.netInt.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.netInt)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rstAvg = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rstMin = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rstMax = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rstClient = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tp = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.errRate = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.errRateMin = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.errRateMax = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.errRateClient = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reqRate = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reqRateMin = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reqRateMax = ::std::option::Option::Some(tmp);
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reqRateClient = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.netInt.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.rstAvg {
            my_size += 9;
        }
        if let Some(v) = self.rstMin {
            my_size += 9;
        }
        if let Some(v) = self.rstMax {
            my_size += 9;
        }
        if let Some(v) = self.rstClient {
            my_size += 9;
        }
        if let Some(v) = self.tp {
            my_size += 9;
        }
        if let Some(v) = self.errRate {
            my_size += 9;
        }
        if let Some(v) = self.errRateMin {
            my_size += 9;
        }
        if let Some(v) = self.errRateMax {
            my_size += 9;
        }
        if let Some(v) = self.errRateClient {
            my_size += 9;
        }
        if let Some(v) = self.reqRate {
            my_size += 9;
        }
        if let Some(v) = self.reqRateMin {
            my_size += 9;
        }
        if let Some(v) = self.reqRateMax {
            my_size += 9;
        }
        if let Some(v) = self.reqRateClient {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.time {
            os.write_int64(1, v)?;
        }
        if let Some(ref v) = self.netInt.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.rstAvg {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.rstMin {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.rstMax {
            os.write_double(5, v)?;
        }
        if let Some(v) = self.rstClient {
            os.write_double(6, v)?;
        }
        if let Some(v) = self.tp {
            os.write_double(7, v)?;
        }
        if let Some(v) = self.errRate {
            os.write_double(8, v)?;
        }
        if let Some(v) = self.errRateMin {
            os.write_double(9, v)?;
        }
        if let Some(v) = self.errRateMax {
            os.write_double(10, v)?;
        }
        if let Some(v) = self.errRateClient {
            os.write_double(11, v)?;
        }
        if let Some(v) = self.reqRate {
            os.write_double(12, v)?;
        }
        if let Some(v) = self.reqRateMin {
            os.write_double(13, v)?;
        }
        if let Some(v) = self.reqRateMax {
            os.write_double(14, v)?;
        }
        if let Some(v) = self.reqRateClient {
            os.write_double(15, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data {
        Data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "time",
                    |m: &Data| { &m.time },
                    |m: &mut Data| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "netInt",
                    |m: &Data| { &m.netInt },
                    |m: &mut Data| { &mut m.netInt },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rstAvg",
                    |m: &Data| { &m.rstAvg },
                    |m: &mut Data| { &mut m.rstAvg },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rstMin",
                    |m: &Data| { &m.rstMin },
                    |m: &mut Data| { &mut m.rstMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rstMax",
                    |m: &Data| { &m.rstMax },
                    |m: &mut Data| { &mut m.rstMax },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rstClient",
                    |m: &Data| { &m.rstClient },
                    |m: &mut Data| { &mut m.rstClient },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tp",
                    |m: &Data| { &m.tp },
                    |m: &mut Data| { &mut m.tp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "errRate",
                    |m: &Data| { &m.errRate },
                    |m: &mut Data| { &mut m.errRate },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "errRateMin",
                    |m: &Data| { &m.errRateMin },
                    |m: &mut Data| { &mut m.errRateMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "errRateMax",
                    |m: &Data| { &m.errRateMax },
                    |m: &mut Data| { &mut m.errRateMax },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "errRateClient",
                    |m: &Data| { &m.errRateClient },
                    |m: &mut Data| { &mut m.errRateClient },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reqRate",
                    |m: &Data| { &m.reqRate },
                    |m: &mut Data| { &mut m.reqRate },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reqRateMin",
                    |m: &Data| { &m.reqRateMin },
                    |m: &mut Data| { &mut m.reqRateMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reqRateMax",
                    |m: &Data| { &m.reqRateMax },
                    |m: &mut Data| { &mut m.reqRateMax },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reqRateClient",
                    |m: &Data| { &m.reqRateClient },
                    |m: &mut Data| { &mut m.reqRateClient },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Data>(
                    "Data",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Data {
        static mut instance: ::protobuf::lazy::Lazy<Data> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Data,
        };
        unsafe {
            instance.get(Data::new)
        }
    }
}

impl ::protobuf::Clear for Data {
    fn clear(&mut self) {
        self.time = ::std::option::Option::None;
        self.netInt.clear();
        self.rstAvg = ::std::option::Option::None;
        self.rstMin = ::std::option::Option::None;
        self.rstMax = ::std::option::Option::None;
        self.rstClient = ::std::option::Option::None;
        self.tp = ::std::option::Option::None;
        self.errRate = ::std::option::Option::None;
        self.errRateMin = ::std::option::Option::None;
        self.errRateMax = ::std::option::Option::None;
        self.errRateClient = ::std::option::Option::None;
        self.reqRate = ::std::option::Option::None;
        self.reqRateMin = ::std::option::Option::None;
        self.reqRateMax = ::std::option::Option::None;
        self.reqRateClient = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Data {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eanalysis.proto\x12\x08analysis\":\n\x04Init\x12\x10\n\x08interval\
    \x18\x01\x20\x02(\r\x12\x10\n\x08duration\x18\x02\x20\x02(\r\x12\x0e\n\
    \x06netInt\x18\x03\x20\x03(\t\"\x93\x02\n\x04Data\x12\x0c\n\x04time\x18\
    \x01\x20\x02(\x03\x12\x0e\n\x06netInt\x18\x02\x20\x02(\t\x12\x0e\n\x06rs\
    tAvg\x18\x03\x20\x01(\x01\x12\x0e\n\x06rstMin\x18\x04\x20\x01(\x01\x12\
    \x0e\n\x06rstMax\x18\x05\x20\x01(\x01\x12\x11\n\trstClient\x18\x06\x20\
    \x01(\x01\x12\n\n\x02tp\x18\x07\x20\x01(\x01\x12\x0f\n\x07errRate\x18\
    \x08\x20\x01(\x01\x12\x12\n\nerrRateMin\x18\t\x20\x01(\x01\x12\x12\n\ner\
    rRateMax\x18\n\x20\x01(\x01\x12\x15\n\rerrRateClient\x18\x0b\x20\x01(\
    \x01\x12\x0f\n\x07reqRate\x18\x0c\x20\x01(\x01\x12\x12\n\nreqRateMin\x18\
    \r\x20\x01(\x01\x12\x12\n\nreqRateMax\x18\x0e\x20\x01(\x01\x12\x15\n\rre\
    qRateClient\x18\x0f\x20\x01(\x01\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
