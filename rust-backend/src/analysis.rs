// This file is generated by rust-protobuf 2.10.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `analysis.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct IP {
    // message fields
    ip: ::std::option::Option<u32>,
    ports: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IP {
    fn default() -> &'a IP {
        <IP as ::protobuf::Message>::default_instance()
    }
}

impl IP {
    pub fn new() -> IP {
        ::std::default::Default::default()
    }

    // optional uint32 ip = 1;


    pub fn get_ip(&self) -> u32 {
        self.ip.unwrap_or(0)
    }
    pub fn clear_ip(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: u32) {
        self.ip = ::std::option::Option::Some(v);
    }

    // optional uint32 ports = 2;


    pub fn get_ports(&self) -> u32 {
        self.ports.unwrap_or(0)
    }
    pub fn clear_ports(&mut self) {
        self.ports = ::std::option::Option::None;
    }

    pub fn has_ports(&self) -> bool {
        self.ports.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ports(&mut self, v: u32) {
        self.ports = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IP {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ip = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ports = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.ip {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ports {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.ip {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.ports {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IP {
        IP::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "ip",
                    |m: &IP| { &m.ip },
                    |m: &mut IP| { &mut m.ip },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "ports",
                    |m: &IP| { &m.ports },
                    |m: &mut IP| { &mut m.ports },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<IP>(
                    "IP",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IP {
        static mut instance: ::protobuf::lazy::Lazy<IP> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IP,
        };
        unsafe {
            instance.get(IP::new)
        }
    }
}

impl ::protobuf::Clear for IP {
    fn clear(&mut self) {
        self.ip = ::std::option::Option::None;
        self.ports = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IP {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Protocol {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    activeMetrics: ::std::option::Option<u32>,
    client: ::protobuf::SingularPtrField<IP>,
    server: ::protobuf::SingularPtrField<IP>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Protocol {
    fn default() -> &'a Protocol {
        <Protocol as ::protobuf::Message>::default_instance()
    }
}

impl Protocol {
    pub fn new() -> Protocol {
        ::std::default::Default::default()
    }

    // required string id = 1;


    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 activeMetrics = 2;


    pub fn get_activeMetrics(&self) -> u32 {
        self.activeMetrics.unwrap_or(0)
    }
    pub fn clear_activeMetrics(&mut self) {
        self.activeMetrics = ::std::option::Option::None;
    }

    pub fn has_activeMetrics(&self) -> bool {
        self.activeMetrics.is_some()
    }

    // Param is passed by value, moved
    pub fn set_activeMetrics(&mut self, v: u32) {
        self.activeMetrics = ::std::option::Option::Some(v);
    }

    // optional .analysis.IP client = 3;


    pub fn get_client(&self) -> &IP {
        self.client.as_ref().unwrap_or_else(|| IP::default_instance())
    }
    pub fn clear_client(&mut self) {
        self.client.clear();
    }

    pub fn has_client(&self) -> bool {
        self.client.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client(&mut self, v: IP) {
        self.client = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client(&mut self) -> &mut IP {
        if self.client.is_none() {
            self.client.set_default();
        }
        self.client.as_mut().unwrap()
    }

    // Take field
    pub fn take_client(&mut self) -> IP {
        self.client.take().unwrap_or_else(|| IP::new())
    }

    // optional .analysis.IP server = 4;


    pub fn get_server(&self) -> &IP {
        self.server.as_ref().unwrap_or_else(|| IP::default_instance())
    }
    pub fn clear_server(&mut self) {
        self.server.clear();
    }

    pub fn has_server(&self) -> bool {
        self.server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server(&mut self, v: IP) {
        self.server = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server(&mut self) -> &mut IP {
        if self.server.is_none() {
            self.server.set_default();
        }
        self.server.as_mut().unwrap()
    }

    // Take field
    pub fn take_server(&mut self) -> IP {
        self.server.take().unwrap_or_else(|| IP::new())
    }
}

impl ::protobuf::Message for Protocol {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        if self.activeMetrics.is_none() {
            return false;
        }
        for v in &self.client {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.server {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.activeMetrics = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.server)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.activeMetrics {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.client.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.server.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.activeMetrics {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.client.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.server.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Protocol {
        Protocol::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &Protocol| { &m.id },
                    |m: &mut Protocol| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "activeMetrics",
                    |m: &Protocol| { &m.activeMetrics },
                    |m: &mut Protocol| { &mut m.activeMetrics },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IP>>(
                    "client",
                    |m: &Protocol| { &m.client },
                    |m: &mut Protocol| { &mut m.client },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IP>>(
                    "server",
                    |m: &Protocol| { &m.server },
                    |m: &mut Protocol| { &mut m.server },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Protocol>(
                    "Protocol",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Protocol {
        static mut instance: ::protobuf::lazy::Lazy<Protocol> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Protocol,
        };
        unsafe {
            instance.get(Protocol::new)
        }
    }
}

impl ::protobuf::Clear for Protocol {
    fn clear(&mut self) {
        self.id.clear();
        self.activeMetrics = ::std::option::Option::None;
        self.client.clear();
        self.server.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Protocol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Protocol {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct NetInt {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    protocols: ::protobuf::RepeatedField<Protocol>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NetInt {
    fn default() -> &'a NetInt {
        <NetInt as ::protobuf::Message>::default_instance()
    }
}

impl NetInt {
    pub fn new() -> NetInt {
        ::std::default::Default::default()
    }

    // required string id = 1;


    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .analysis.Protocol protocols = 2;


    pub fn get_protocols(&self) -> &[Protocol] {
        &self.protocols
    }
    pub fn clear_protocols(&mut self) {
        self.protocols.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocols(&mut self, v: ::protobuf::RepeatedField<Protocol>) {
        self.protocols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_protocols(&mut self) -> &mut ::protobuf::RepeatedField<Protocol> {
        &mut self.protocols
    }

    // Take field
    pub fn take_protocols(&mut self) -> ::protobuf::RepeatedField<Protocol> {
        ::std::mem::replace(&mut self.protocols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for NetInt {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        for v in &self.protocols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.protocols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.protocols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.protocols {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NetInt {
        NetInt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &NetInt| { &m.id },
                    |m: &mut NetInt| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Protocol>>(
                    "protocols",
                    |m: &NetInt| { &m.protocols },
                    |m: &mut NetInt| { &mut m.protocols },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NetInt>(
                    "NetInt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NetInt {
        static mut instance: ::protobuf::lazy::Lazy<NetInt> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NetInt,
        };
        unsafe {
            instance.get(NetInt::new)
        }
    }
}

impl ::protobuf::Clear for NetInt {
    fn clear(&mut self) {
        self.id.clear();
        self.protocols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NetInt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetInt {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Init {
    // message fields
    netInts: ::protobuf::RepeatedField<NetInt>,
    interval: ::std::option::Option<u32>,
    duration: ::std::option::Option<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Init {
    fn default() -> &'a Init {
        <Init as ::protobuf::Message>::default_instance()
    }
}

impl Init {
    pub fn new() -> Init {
        ::std::default::Default::default()
    }

    // repeated .analysis.NetInt netInts = 1;


    pub fn get_netInts(&self) -> &[NetInt] {
        &self.netInts
    }
    pub fn clear_netInts(&mut self) {
        self.netInts.clear();
    }

    // Param is passed by value, moved
    pub fn set_netInts(&mut self, v: ::protobuf::RepeatedField<NetInt>) {
        self.netInts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_netInts(&mut self) -> &mut ::protobuf::RepeatedField<NetInt> {
        &mut self.netInts
    }

    // Take field
    pub fn take_netInts(&mut self) -> ::protobuf::RepeatedField<NetInt> {
        ::std::mem::replace(&mut self.netInts, ::protobuf::RepeatedField::new())
    }

    // required uint32 interval = 2;


    pub fn get_interval(&self) -> u32 {
        self.interval.unwrap_or(0)
    }
    pub fn clear_interval(&mut self) {
        self.interval = ::std::option::Option::None;
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: u32) {
        self.interval = ::std::option::Option::Some(v);
    }

    // required uint32 duration = 3;


    pub fn get_duration(&self) -> u32 {
        self.duration.unwrap_or(0)
    }
    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u32) {
        self.duration = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Init {
    fn is_initialized(&self) -> bool {
        if self.interval.is_none() {
            return false;
        }
        if self.duration.is_none() {
            return false;
        }
        for v in &self.netInts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.netInts)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.interval = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.duration = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.netInts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.interval {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.netInts {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.interval {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.duration {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Init {
        Init::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NetInt>>(
                    "netInts",
                    |m: &Init| { &m.netInts },
                    |m: &mut Init| { &mut m.netInts },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "interval",
                    |m: &Init| { &m.interval },
                    |m: &mut Init| { &mut m.interval },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "duration",
                    |m: &Init| { &m.duration },
                    |m: &mut Init| { &mut m.duration },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Init>(
                    "Init",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Init {
        static mut instance: ::protobuf::lazy::Lazy<Init> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Init,
        };
        unsafe {
            instance.get(Init::new)
        }
    }
}

impl ::protobuf::Clear for Init {
    fn clear(&mut self) {
        self.netInts.clear();
        self.interval = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Init {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Init {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Data {
    // message fields
    time: ::std::option::Option<i64>,
    netInts: ::protobuf::SingularField<::std::string::String>,
    rstAvg: ::std::option::Option<f64>,
    rstMin: ::std::option::Option<f64>,
    rstMax: ::std::option::Option<f64>,
    rstClient: ::std::option::Option<f64>,
    errRate: ::std::option::Option<f64>,
    errRateMin: ::std::option::Option<f64>,
    errRateMax: ::std::option::Option<f64>,
    errRateClient: ::std::option::Option<f64>,
    reqRate: ::std::option::Option<f64>,
    reqRateMin: ::std::option::Option<f64>,
    reqRateMax: ::std::option::Option<f64>,
    reqRateClient: ::std::option::Option<f64>,
    connRate: ::std::option::Option<f64>,
    connRateMin: ::std::option::Option<f64>,
    connRateMax: ::std::option::Option<f64>,
    client: ::protobuf::RepeatedField<Freq>,
    req_path: ::protobuf::RepeatedField<Freq>,
    req_method: ::protobuf::RepeatedField<Freq>,
    req_type: ::protobuf::RepeatedField<Freq>,
    rsp_status: ::protobuf::RepeatedField<Freq>,
    tpAvg: ::std::option::Option<f64>,
    tpMin: ::std::option::Option<f64>,
    tpMax: ::std::option::Option<f64>,
    tpRevAvg: ::std::option::Option<f64>,
    tpRevMin: ::std::option::Option<f64>,
    tpRevMax: ::std::option::Option<f64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    // required int64 time = 1;


    pub fn get_time(&self) -> i64 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i64) {
        self.time = ::std::option::Option::Some(v);
    }

    // required string netInts = 2;


    pub fn get_netInts(&self) -> &str {
        match self.netInts.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_netInts(&mut self) {
        self.netInts.clear();
    }

    pub fn has_netInts(&self) -> bool {
        self.netInts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_netInts(&mut self, v: ::std::string::String) {
        self.netInts = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_netInts(&mut self) -> &mut ::std::string::String {
        if self.netInts.is_none() {
            self.netInts.set_default();
        }
        self.netInts.as_mut().unwrap()
    }

    // Take field
    pub fn take_netInts(&mut self) -> ::std::string::String {
        self.netInts.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional double rstAvg = 3;


    pub fn get_rstAvg(&self) -> f64 {
        self.rstAvg.unwrap_or(0.)
    }
    pub fn clear_rstAvg(&mut self) {
        self.rstAvg = ::std::option::Option::None;
    }

    pub fn has_rstAvg(&self) -> bool {
        self.rstAvg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rstAvg(&mut self, v: f64) {
        self.rstAvg = ::std::option::Option::Some(v);
    }

    // optional double rstMin = 4;


    pub fn get_rstMin(&self) -> f64 {
        self.rstMin.unwrap_or(0.)
    }
    pub fn clear_rstMin(&mut self) {
        self.rstMin = ::std::option::Option::None;
    }

    pub fn has_rstMin(&self) -> bool {
        self.rstMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rstMin(&mut self, v: f64) {
        self.rstMin = ::std::option::Option::Some(v);
    }

    // optional double rstMax = 5;


    pub fn get_rstMax(&self) -> f64 {
        self.rstMax.unwrap_or(0.)
    }
    pub fn clear_rstMax(&mut self) {
        self.rstMax = ::std::option::Option::None;
    }

    pub fn has_rstMax(&self) -> bool {
        self.rstMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rstMax(&mut self, v: f64) {
        self.rstMax = ::std::option::Option::Some(v);
    }

    // optional double rstClient = 6;


    pub fn get_rstClient(&self) -> f64 {
        self.rstClient.unwrap_or(0.)
    }
    pub fn clear_rstClient(&mut self) {
        self.rstClient = ::std::option::Option::None;
    }

    pub fn has_rstClient(&self) -> bool {
        self.rstClient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rstClient(&mut self, v: f64) {
        self.rstClient = ::std::option::Option::Some(v);
    }

    // optional double errRate = 7;


    pub fn get_errRate(&self) -> f64 {
        self.errRate.unwrap_or(0.)
    }
    pub fn clear_errRate(&mut self) {
        self.errRate = ::std::option::Option::None;
    }

    pub fn has_errRate(&self) -> bool {
        self.errRate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errRate(&mut self, v: f64) {
        self.errRate = ::std::option::Option::Some(v);
    }

    // optional double errRateMin = 8;


    pub fn get_errRateMin(&self) -> f64 {
        self.errRateMin.unwrap_or(0.)
    }
    pub fn clear_errRateMin(&mut self) {
        self.errRateMin = ::std::option::Option::None;
    }

    pub fn has_errRateMin(&self) -> bool {
        self.errRateMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errRateMin(&mut self, v: f64) {
        self.errRateMin = ::std::option::Option::Some(v);
    }

    // optional double errRateMax = 9;


    pub fn get_errRateMax(&self) -> f64 {
        self.errRateMax.unwrap_or(0.)
    }
    pub fn clear_errRateMax(&mut self) {
        self.errRateMax = ::std::option::Option::None;
    }

    pub fn has_errRateMax(&self) -> bool {
        self.errRateMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errRateMax(&mut self, v: f64) {
        self.errRateMax = ::std::option::Option::Some(v);
    }

    // optional double errRateClient = 10;


    pub fn get_errRateClient(&self) -> f64 {
        self.errRateClient.unwrap_or(0.)
    }
    pub fn clear_errRateClient(&mut self) {
        self.errRateClient = ::std::option::Option::None;
    }

    pub fn has_errRateClient(&self) -> bool {
        self.errRateClient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errRateClient(&mut self, v: f64) {
        self.errRateClient = ::std::option::Option::Some(v);
    }

    // optional double reqRate = 11;


    pub fn get_reqRate(&self) -> f64 {
        self.reqRate.unwrap_or(0.)
    }
    pub fn clear_reqRate(&mut self) {
        self.reqRate = ::std::option::Option::None;
    }

    pub fn has_reqRate(&self) -> bool {
        self.reqRate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqRate(&mut self, v: f64) {
        self.reqRate = ::std::option::Option::Some(v);
    }

    // optional double reqRateMin = 12;


    pub fn get_reqRateMin(&self) -> f64 {
        self.reqRateMin.unwrap_or(0.)
    }
    pub fn clear_reqRateMin(&mut self) {
        self.reqRateMin = ::std::option::Option::None;
    }

    pub fn has_reqRateMin(&self) -> bool {
        self.reqRateMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqRateMin(&mut self, v: f64) {
        self.reqRateMin = ::std::option::Option::Some(v);
    }

    // optional double reqRateMax = 13;


    pub fn get_reqRateMax(&self) -> f64 {
        self.reqRateMax.unwrap_or(0.)
    }
    pub fn clear_reqRateMax(&mut self) {
        self.reqRateMax = ::std::option::Option::None;
    }

    pub fn has_reqRateMax(&self) -> bool {
        self.reqRateMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqRateMax(&mut self, v: f64) {
        self.reqRateMax = ::std::option::Option::Some(v);
    }

    // optional double reqRateClient = 14;


    pub fn get_reqRateClient(&self) -> f64 {
        self.reqRateClient.unwrap_or(0.)
    }
    pub fn clear_reqRateClient(&mut self) {
        self.reqRateClient = ::std::option::Option::None;
    }

    pub fn has_reqRateClient(&self) -> bool {
        self.reqRateClient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reqRateClient(&mut self, v: f64) {
        self.reqRateClient = ::std::option::Option::Some(v);
    }

    // optional double connRate = 15;


    pub fn get_connRate(&self) -> f64 {
        self.connRate.unwrap_or(0.)
    }
    pub fn clear_connRate(&mut self) {
        self.connRate = ::std::option::Option::None;
    }

    pub fn has_connRate(&self) -> bool {
        self.connRate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connRate(&mut self, v: f64) {
        self.connRate = ::std::option::Option::Some(v);
    }

    // optional double connRateMin = 16;


    pub fn get_connRateMin(&self) -> f64 {
        self.connRateMin.unwrap_or(0.)
    }
    pub fn clear_connRateMin(&mut self) {
        self.connRateMin = ::std::option::Option::None;
    }

    pub fn has_connRateMin(&self) -> bool {
        self.connRateMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connRateMin(&mut self, v: f64) {
        self.connRateMin = ::std::option::Option::Some(v);
    }

    // optional double connRateMax = 17;


    pub fn get_connRateMax(&self) -> f64 {
        self.connRateMax.unwrap_or(0.)
    }
    pub fn clear_connRateMax(&mut self) {
        self.connRateMax = ::std::option::Option::None;
    }

    pub fn has_connRateMax(&self) -> bool {
        self.connRateMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connRateMax(&mut self, v: f64) {
        self.connRateMax = ::std::option::Option::Some(v);
    }

    // repeated .analysis.Freq client = 18;


    pub fn get_client(&self) -> &[Freq] {
        &self.client
    }
    pub fn clear_client(&mut self) {
        self.client.clear();
    }

    // Param is passed by value, moved
    pub fn set_client(&mut self, v: ::protobuf::RepeatedField<Freq>) {
        self.client = v;
    }

    // Mutable pointer to the field.
    pub fn mut_client(&mut self) -> &mut ::protobuf::RepeatedField<Freq> {
        &mut self.client
    }

    // Take field
    pub fn take_client(&mut self) -> ::protobuf::RepeatedField<Freq> {
        ::std::mem::replace(&mut self.client, ::protobuf::RepeatedField::new())
    }

    // repeated .analysis.Freq req_path = 19;


    pub fn get_req_path(&self) -> &[Freq] {
        &self.req_path
    }
    pub fn clear_req_path(&mut self) {
        self.req_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_req_path(&mut self, v: ::protobuf::RepeatedField<Freq>) {
        self.req_path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_req_path(&mut self) -> &mut ::protobuf::RepeatedField<Freq> {
        &mut self.req_path
    }

    // Take field
    pub fn take_req_path(&mut self) -> ::protobuf::RepeatedField<Freq> {
        ::std::mem::replace(&mut self.req_path, ::protobuf::RepeatedField::new())
    }

    // repeated .analysis.Freq req_method = 20;


    pub fn get_req_method(&self) -> &[Freq] {
        &self.req_method
    }
    pub fn clear_req_method(&mut self) {
        self.req_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_req_method(&mut self, v: ::protobuf::RepeatedField<Freq>) {
        self.req_method = v;
    }

    // Mutable pointer to the field.
    pub fn mut_req_method(&mut self) -> &mut ::protobuf::RepeatedField<Freq> {
        &mut self.req_method
    }

    // Take field
    pub fn take_req_method(&mut self) -> ::protobuf::RepeatedField<Freq> {
        ::std::mem::replace(&mut self.req_method, ::protobuf::RepeatedField::new())
    }

    // repeated .analysis.Freq req_type = 21;


    pub fn get_req_type(&self) -> &[Freq] {
        &self.req_type
    }
    pub fn clear_req_type(&mut self) {
        self.req_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_req_type(&mut self, v: ::protobuf::RepeatedField<Freq>) {
        self.req_type = v;
    }

    // Mutable pointer to the field.
    pub fn mut_req_type(&mut self) -> &mut ::protobuf::RepeatedField<Freq> {
        &mut self.req_type
    }

    // Take field
    pub fn take_req_type(&mut self) -> ::protobuf::RepeatedField<Freq> {
        ::std::mem::replace(&mut self.req_type, ::protobuf::RepeatedField::new())
    }

    // repeated .analysis.Freq rsp_status = 22;


    pub fn get_rsp_status(&self) -> &[Freq] {
        &self.rsp_status
    }
    pub fn clear_rsp_status(&mut self) {
        self.rsp_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_rsp_status(&mut self, v: ::protobuf::RepeatedField<Freq>) {
        self.rsp_status = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rsp_status(&mut self) -> &mut ::protobuf::RepeatedField<Freq> {
        &mut self.rsp_status
    }

    // Take field
    pub fn take_rsp_status(&mut self) -> ::protobuf::RepeatedField<Freq> {
        ::std::mem::replace(&mut self.rsp_status, ::protobuf::RepeatedField::new())
    }

    // optional double tpAvg = 23;


    pub fn get_tpAvg(&self) -> f64 {
        self.tpAvg.unwrap_or(0.)
    }
    pub fn clear_tpAvg(&mut self) {
        self.tpAvg = ::std::option::Option::None;
    }

    pub fn has_tpAvg(&self) -> bool {
        self.tpAvg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tpAvg(&mut self, v: f64) {
        self.tpAvg = ::std::option::Option::Some(v);
    }

    // optional double tpMin = 24;


    pub fn get_tpMin(&self) -> f64 {
        self.tpMin.unwrap_or(0.)
    }
    pub fn clear_tpMin(&mut self) {
        self.tpMin = ::std::option::Option::None;
    }

    pub fn has_tpMin(&self) -> bool {
        self.tpMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tpMin(&mut self, v: f64) {
        self.tpMin = ::std::option::Option::Some(v);
    }

    // optional double tpMax = 25;


    pub fn get_tpMax(&self) -> f64 {
        self.tpMax.unwrap_or(0.)
    }
    pub fn clear_tpMax(&mut self) {
        self.tpMax = ::std::option::Option::None;
    }

    pub fn has_tpMax(&self) -> bool {
        self.tpMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tpMax(&mut self, v: f64) {
        self.tpMax = ::std::option::Option::Some(v);
    }

    // optional double tpRevAvg = 26;


    pub fn get_tpRevAvg(&self) -> f64 {
        self.tpRevAvg.unwrap_or(0.)
    }
    pub fn clear_tpRevAvg(&mut self) {
        self.tpRevAvg = ::std::option::Option::None;
    }

    pub fn has_tpRevAvg(&self) -> bool {
        self.tpRevAvg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tpRevAvg(&mut self, v: f64) {
        self.tpRevAvg = ::std::option::Option::Some(v);
    }

    // optional double tpRevMin = 27;


    pub fn get_tpRevMin(&self) -> f64 {
        self.tpRevMin.unwrap_or(0.)
    }
    pub fn clear_tpRevMin(&mut self) {
        self.tpRevMin = ::std::option::Option::None;
    }

    pub fn has_tpRevMin(&self) -> bool {
        self.tpRevMin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tpRevMin(&mut self, v: f64) {
        self.tpRevMin = ::std::option::Option::Some(v);
    }

    // optional double tpRevMax = 28;


    pub fn get_tpRevMax(&self) -> f64 {
        self.tpRevMax.unwrap_or(0.)
    }
    pub fn clear_tpRevMax(&mut self) {
        self.tpRevMax = ::std::option::Option::None;
    }

    pub fn has_tpRevMax(&self) -> bool {
        self.tpRevMax.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tpRevMax(&mut self, v: f64) {
        self.tpRevMax = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Data {
    fn is_initialized(&self) -> bool {
        if self.time.is_none() {
            return false;
        }
        if self.netInts.is_none() {
            return false;
        }
        for v in &self.client {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.req_path {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.req_method {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.req_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rsp_status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.netInts)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rstAvg = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rstMin = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rstMax = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rstClient = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.errRate = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.errRateMin = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.errRateMax = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.errRateClient = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reqRate = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reqRateMin = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reqRateMax = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reqRateClient = ::std::option::Option::Some(tmp);
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.connRate = ::std::option::Option::Some(tmp);
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.connRateMin = ::std::option::Option::Some(tmp);
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.connRateMax = ::std::option::Option::Some(tmp);
                },
                18 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.client)?;
                },
                19 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.req_path)?;
                },
                20 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.req_method)?;
                },
                21 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.req_type)?;
                },
                22 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rsp_status)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tpAvg = ::std::option::Option::Some(tmp);
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tpMin = ::std::option::Option::Some(tmp);
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tpMax = ::std::option::Option::Some(tmp);
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tpRevAvg = ::std::option::Option::Some(tmp);
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tpRevMin = ::std::option::Option::Some(tmp);
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tpRevMax = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.netInts.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.rstAvg {
            my_size += 9;
        }
        if let Some(v) = self.rstMin {
            my_size += 9;
        }
        if let Some(v) = self.rstMax {
            my_size += 9;
        }
        if let Some(v) = self.rstClient {
            my_size += 9;
        }
        if let Some(v) = self.errRate {
            my_size += 9;
        }
        if let Some(v) = self.errRateMin {
            my_size += 9;
        }
        if let Some(v) = self.errRateMax {
            my_size += 9;
        }
        if let Some(v) = self.errRateClient {
            my_size += 9;
        }
        if let Some(v) = self.reqRate {
            my_size += 9;
        }
        if let Some(v) = self.reqRateMin {
            my_size += 9;
        }
        if let Some(v) = self.reqRateMax {
            my_size += 9;
        }
        if let Some(v) = self.reqRateClient {
            my_size += 9;
        }
        if let Some(v) = self.connRate {
            my_size += 9;
        }
        if let Some(v) = self.connRateMin {
            my_size += 10;
        }
        if let Some(v) = self.connRateMax {
            my_size += 10;
        }
        for value in &self.client {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.req_path {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.req_method {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.req_type {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.rsp_status {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.tpAvg {
            my_size += 10;
        }
        if let Some(v) = self.tpMin {
            my_size += 10;
        }
        if let Some(v) = self.tpMax {
            my_size += 10;
        }
        if let Some(v) = self.tpRevAvg {
            my_size += 10;
        }
        if let Some(v) = self.tpRevMin {
            my_size += 10;
        }
        if let Some(v) = self.tpRevMax {
            my_size += 10;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.time {
            os.write_int64(1, v)?;
        }
        if let Some(ref v) = self.netInts.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.rstAvg {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.rstMin {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.rstMax {
            os.write_double(5, v)?;
        }
        if let Some(v) = self.rstClient {
            os.write_double(6, v)?;
        }
        if let Some(v) = self.errRate {
            os.write_double(7, v)?;
        }
        if let Some(v) = self.errRateMin {
            os.write_double(8, v)?;
        }
        if let Some(v) = self.errRateMax {
            os.write_double(9, v)?;
        }
        if let Some(v) = self.errRateClient {
            os.write_double(10, v)?;
        }
        if let Some(v) = self.reqRate {
            os.write_double(11, v)?;
        }
        if let Some(v) = self.reqRateMin {
            os.write_double(12, v)?;
        }
        if let Some(v) = self.reqRateMax {
            os.write_double(13, v)?;
        }
        if let Some(v) = self.reqRateClient {
            os.write_double(14, v)?;
        }
        if let Some(v) = self.connRate {
            os.write_double(15, v)?;
        }
        if let Some(v) = self.connRateMin {
            os.write_double(16, v)?;
        }
        if let Some(v) = self.connRateMax {
            os.write_double(17, v)?;
        }
        for v in &self.client {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.req_path {
            os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.req_method {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.req_type {
            os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.rsp_status {
            os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.tpAvg {
            os.write_double(23, v)?;
        }
        if let Some(v) = self.tpMin {
            os.write_double(24, v)?;
        }
        if let Some(v) = self.tpMax {
            os.write_double(25, v)?;
        }
        if let Some(v) = self.tpRevAvg {
            os.write_double(26, v)?;
        }
        if let Some(v) = self.tpRevMin {
            os.write_double(27, v)?;
        }
        if let Some(v) = self.tpRevMax {
            os.write_double(28, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data {
        Data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "time",
                    |m: &Data| { &m.time },
                    |m: &mut Data| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "netInts",
                    |m: &Data| { &m.netInts },
                    |m: &mut Data| { &mut m.netInts },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rstAvg",
                    |m: &Data| { &m.rstAvg },
                    |m: &mut Data| { &mut m.rstAvg },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rstMin",
                    |m: &Data| { &m.rstMin },
                    |m: &mut Data| { &mut m.rstMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rstMax",
                    |m: &Data| { &m.rstMax },
                    |m: &mut Data| { &mut m.rstMax },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "rstClient",
                    |m: &Data| { &m.rstClient },
                    |m: &mut Data| { &mut m.rstClient },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "errRate",
                    |m: &Data| { &m.errRate },
                    |m: &mut Data| { &mut m.errRate },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "errRateMin",
                    |m: &Data| { &m.errRateMin },
                    |m: &mut Data| { &mut m.errRateMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "errRateMax",
                    |m: &Data| { &m.errRateMax },
                    |m: &mut Data| { &mut m.errRateMax },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "errRateClient",
                    |m: &Data| { &m.errRateClient },
                    |m: &mut Data| { &mut m.errRateClient },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reqRate",
                    |m: &Data| { &m.reqRate },
                    |m: &mut Data| { &mut m.reqRate },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reqRateMin",
                    |m: &Data| { &m.reqRateMin },
                    |m: &mut Data| { &mut m.reqRateMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reqRateMax",
                    |m: &Data| { &m.reqRateMax },
                    |m: &mut Data| { &mut m.reqRateMax },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reqRateClient",
                    |m: &Data| { &m.reqRateClient },
                    |m: &mut Data| { &mut m.reqRateClient },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "connRate",
                    |m: &Data| { &m.connRate },
                    |m: &mut Data| { &mut m.connRate },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "connRateMin",
                    |m: &Data| { &m.connRateMin },
                    |m: &mut Data| { &mut m.connRateMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "connRateMax",
                    |m: &Data| { &m.connRateMax },
                    |m: &mut Data| { &mut m.connRateMax },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Freq>>(
                    "client",
                    |m: &Data| { &m.client },
                    |m: &mut Data| { &mut m.client },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Freq>>(
                    "req_path",
                    |m: &Data| { &m.req_path },
                    |m: &mut Data| { &mut m.req_path },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Freq>>(
                    "req_method",
                    |m: &Data| { &m.req_method },
                    |m: &mut Data| { &mut m.req_method },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Freq>>(
                    "req_type",
                    |m: &Data| { &m.req_type },
                    |m: &mut Data| { &mut m.req_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Freq>>(
                    "rsp_status",
                    |m: &Data| { &m.rsp_status },
                    |m: &mut Data| { &mut m.rsp_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tpAvg",
                    |m: &Data| { &m.tpAvg },
                    |m: &mut Data| { &mut m.tpAvg },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tpMin",
                    |m: &Data| { &m.tpMin },
                    |m: &mut Data| { &mut m.tpMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tpMax",
                    |m: &Data| { &m.tpMax },
                    |m: &mut Data| { &mut m.tpMax },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tpRevAvg",
                    |m: &Data| { &m.tpRevAvg },
                    |m: &mut Data| { &mut m.tpRevAvg },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tpRevMin",
                    |m: &Data| { &m.tpRevMin },
                    |m: &mut Data| { &mut m.tpRevMin },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "tpRevMax",
                    |m: &Data| { &m.tpRevMax },
                    |m: &mut Data| { &mut m.tpRevMax },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Data>(
                    "Data",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Data {
        static mut instance: ::protobuf::lazy::Lazy<Data> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Data,
        };
        unsafe {
            instance.get(Data::new)
        }
    }
}

impl ::protobuf::Clear for Data {
    fn clear(&mut self) {
        self.time = ::std::option::Option::None;
        self.netInts.clear();
        self.rstAvg = ::std::option::Option::None;
        self.rstMin = ::std::option::Option::None;
        self.rstMax = ::std::option::Option::None;
        self.rstClient = ::std::option::Option::None;
        self.errRate = ::std::option::Option::None;
        self.errRateMin = ::std::option::Option::None;
        self.errRateMax = ::std::option::Option::None;
        self.errRateClient = ::std::option::Option::None;
        self.reqRate = ::std::option::Option::None;
        self.reqRateMin = ::std::option::Option::None;
        self.reqRateMax = ::std::option::Option::None;
        self.reqRateClient = ::std::option::Option::None;
        self.connRate = ::std::option::Option::None;
        self.connRateMin = ::std::option::Option::None;
        self.connRateMax = ::std::option::Option::None;
        self.client.clear();
        self.req_path.clear();
        self.req_method.clear();
        self.req_type.clear();
        self.rsp_status.clear();
        self.tpAvg = ::std::option::Option::None;
        self.tpMin = ::std::option::Option::None;
        self.tpMax = ::std::option::Option::None;
        self.tpRevAvg = ::std::option::Option::None;
        self.tpRevMin = ::std::option::Option::None;
        self.tpRevMax = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Data {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct MetricMsg {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    time: ::std::option::Option<i64>,
    netInts: ::protobuf::SingularField<::std::string::String>,
    clientId: ::std::option::Option<i64>,
    // message oneof groups
    pub values: ::std::option::Option<MetricMsg_oneof_values>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricMsg {
    fn default() -> &'a MetricMsg {
        <MetricMsg as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum MetricMsg_oneof_values {
    metricAvg(MetricAvgMsg),
    metricCumDistr(MetricCumDistrMsg),
}

impl MetricMsg {
    pub fn new() -> MetricMsg {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 time = 2;


    pub fn get_time(&self) -> i64 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i64) {
        self.time = ::std::option::Option::Some(v);
    }

    // required string netInts = 3;


    pub fn get_netInts(&self) -> &str {
        match self.netInts.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_netInts(&mut self) {
        self.netInts.clear();
    }

    pub fn has_netInts(&self) -> bool {
        self.netInts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_netInts(&mut self, v: ::std::string::String) {
        self.netInts = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_netInts(&mut self) -> &mut ::std::string::String {
        if self.netInts.is_none() {
            self.netInts.set_default();
        }
        self.netInts.as_mut().unwrap()
    }

    // Take field
    pub fn take_netInts(&mut self) -> ::std::string::String {
        self.netInts.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 clientId = 4;


    pub fn get_clientId(&self) -> i64 {
        self.clientId.unwrap_or(0)
    }
    pub fn clear_clientId(&mut self) {
        self.clientId = ::std::option::Option::None;
    }

    pub fn has_clientId(&self) -> bool {
        self.clientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientId(&mut self, v: i64) {
        self.clientId = ::std::option::Option::Some(v);
    }

    // optional .analysis.MetricAvgMsg metricAvg = 5;


    pub fn get_metricAvg(&self) -> &MetricAvgMsg {
        match self.values {
            ::std::option::Option::Some(MetricMsg_oneof_values::metricAvg(ref v)) => v,
            _ => MetricAvgMsg::default_instance(),
        }
    }
    pub fn clear_metricAvg(&mut self) {
        self.values = ::std::option::Option::None;
    }

    pub fn has_metricAvg(&self) -> bool {
        match self.values {
            ::std::option::Option::Some(MetricMsg_oneof_values::metricAvg(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metricAvg(&mut self, v: MetricAvgMsg) {
        self.values = ::std::option::Option::Some(MetricMsg_oneof_values::metricAvg(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metricAvg(&mut self) -> &mut MetricAvgMsg {
        if let ::std::option::Option::Some(MetricMsg_oneof_values::metricAvg(_)) = self.values {
        } else {
            self.values = ::std::option::Option::Some(MetricMsg_oneof_values::metricAvg(MetricAvgMsg::new()));
        }
        match self.values {
            ::std::option::Option::Some(MetricMsg_oneof_values::metricAvg(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metricAvg(&mut self) -> MetricAvgMsg {
        if self.has_metricAvg() {
            match self.values.take() {
                ::std::option::Option::Some(MetricMsg_oneof_values::metricAvg(v)) => v,
                _ => panic!(),
            }
        } else {
            MetricAvgMsg::new()
        }
    }

    // optional .analysis.MetricCumDistrMsg metricCumDistr = 6;


    pub fn get_metricCumDistr(&self) -> &MetricCumDistrMsg {
        match self.values {
            ::std::option::Option::Some(MetricMsg_oneof_values::metricCumDistr(ref v)) => v,
            _ => MetricCumDistrMsg::default_instance(),
        }
    }
    pub fn clear_metricCumDistr(&mut self) {
        self.values = ::std::option::Option::None;
    }

    pub fn has_metricCumDistr(&self) -> bool {
        match self.values {
            ::std::option::Option::Some(MetricMsg_oneof_values::metricCumDistr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metricCumDistr(&mut self, v: MetricCumDistrMsg) {
        self.values = ::std::option::Option::Some(MetricMsg_oneof_values::metricCumDistr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metricCumDistr(&mut self) -> &mut MetricCumDistrMsg {
        if let ::std::option::Option::Some(MetricMsg_oneof_values::metricCumDistr(_)) = self.values {
        } else {
            self.values = ::std::option::Option::Some(MetricMsg_oneof_values::metricCumDistr(MetricCumDistrMsg::new()));
        }
        match self.values {
            ::std::option::Option::Some(MetricMsg_oneof_values::metricCumDistr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metricCumDistr(&mut self) -> MetricCumDistrMsg {
        if self.has_metricCumDistr() {
            match self.values.take() {
                ::std::option::Option::Some(MetricMsg_oneof_values::metricCumDistr(v)) => v,
                _ => panic!(),
            }
        } else {
            MetricCumDistrMsg::new()
        }
    }
}

impl ::protobuf::Message for MetricMsg {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.time.is_none() {
            return false;
        }
        if self.netInts.is_none() {
            return false;
        }
        if self.clientId.is_none() {
            return false;
        }
        if let Some(MetricMsg_oneof_values::metricAvg(ref v)) = self.values {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MetricMsg_oneof_values::metricCumDistr(ref v)) = self.values {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.netInts)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.clientId = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.values = ::std::option::Option::Some(MetricMsg_oneof_values::metricAvg(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.values = ::std::option::Option::Some(MetricMsg_oneof_values::metricCumDistr(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.netInts.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.clientId {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.values {
            match v {
                &MetricMsg_oneof_values::metricAvg(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MetricMsg_oneof_values::metricCumDistr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.time {
            os.write_int64(2, v)?;
        }
        if let Some(ref v) = self.netInts.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.clientId {
            os.write_int64(4, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.values {
            match v {
                &MetricMsg_oneof_values::metricAvg(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MetricMsg_oneof_values::metricCumDistr(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricMsg {
        MetricMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &MetricMsg| { &m.name },
                    |m: &mut MetricMsg| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "time",
                    |m: &MetricMsg| { &m.time },
                    |m: &mut MetricMsg| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "netInts",
                    |m: &MetricMsg| { &m.netInts },
                    |m: &mut MetricMsg| { &mut m.netInts },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "clientId",
                    |m: &MetricMsg| { &m.clientId },
                    |m: &mut MetricMsg| { &mut m.clientId },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MetricAvgMsg>(
                    "metricAvg",
                    MetricMsg::has_metricAvg,
                    MetricMsg::get_metricAvg,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MetricCumDistrMsg>(
                    "metricCumDistr",
                    MetricMsg::has_metricCumDistr,
                    MetricMsg::get_metricCumDistr,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricMsg>(
                    "MetricMsg",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricMsg {
        static mut instance: ::protobuf::lazy::Lazy<MetricMsg> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricMsg,
        };
        unsafe {
            instance.get(MetricMsg::new)
        }
    }
}

impl ::protobuf::Clear for MetricMsg {
    fn clear(&mut self) {
        self.name.clear();
        self.time = ::std::option::Option::None;
        self.netInts.clear();
        self.clientId = ::std::option::Option::None;
        self.values = ::std::option::Option::None;
        self.values = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct MetricAvgMsg {
    // message fields
    avg: ::std::option::Option<f64>,
    min: ::std::option::Option<f64>,
    max: ::std::option::Option<f64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricAvgMsg {
    fn default() -> &'a MetricAvgMsg {
        <MetricAvgMsg as ::protobuf::Message>::default_instance()
    }
}

impl MetricAvgMsg {
    pub fn new() -> MetricAvgMsg {
        ::std::default::Default::default()
    }

    // required double avg = 5;


    pub fn get_avg(&self) -> f64 {
        self.avg.unwrap_or(0.)
    }
    pub fn clear_avg(&mut self) {
        self.avg = ::std::option::Option::None;
    }

    pub fn has_avg(&self) -> bool {
        self.avg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_avg(&mut self, v: f64) {
        self.avg = ::std::option::Option::Some(v);
    }

    // required double min = 6;


    pub fn get_min(&self) -> f64 {
        self.min.unwrap_or(0.)
    }
    pub fn clear_min(&mut self) {
        self.min = ::std::option::Option::None;
    }

    pub fn has_min(&self) -> bool {
        self.min.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min(&mut self, v: f64) {
        self.min = ::std::option::Option::Some(v);
    }

    // required double max = 7;


    pub fn get_max(&self) -> f64 {
        self.max.unwrap_or(0.)
    }
    pub fn clear_max(&mut self) {
        self.max = ::std::option::Option::None;
    }

    pub fn has_max(&self) -> bool {
        self.max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max(&mut self, v: f64) {
        self.max = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for MetricAvgMsg {
    fn is_initialized(&self) -> bool {
        if self.avg.is_none() {
            return false;
        }
        if self.min.is_none() {
            return false;
        }
        if self.max.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.avg = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.min = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.max = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.avg {
            my_size += 9;
        }
        if let Some(v) = self.min {
            my_size += 9;
        }
        if let Some(v) = self.max {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.avg {
            os.write_double(5, v)?;
        }
        if let Some(v) = self.min {
            os.write_double(6, v)?;
        }
        if let Some(v) = self.max {
            os.write_double(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricAvgMsg {
        MetricAvgMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "avg",
                    |m: &MetricAvgMsg| { &m.avg },
                    |m: &mut MetricAvgMsg| { &mut m.avg },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "min",
                    |m: &MetricAvgMsg| { &m.min },
                    |m: &mut MetricAvgMsg| { &mut m.min },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "max",
                    |m: &MetricAvgMsg| { &m.max },
                    |m: &mut MetricAvgMsg| { &mut m.max },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricAvgMsg>(
                    "MetricAvgMsg",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricAvgMsg {
        static mut instance: ::protobuf::lazy::Lazy<MetricAvgMsg> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricAvgMsg,
        };
        unsafe {
            instance.get(MetricAvgMsg::new)
        }
    }
}

impl ::protobuf::Clear for MetricAvgMsg {
    fn clear(&mut self) {
        self.avg = ::std::option::Option::None;
        self.min = ::std::option::Option::None;
        self.max = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricAvgMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricAvgMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Freq {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    freq: ::std::option::Option<f64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Freq {
    fn default() -> &'a Freq {
        <Freq as ::protobuf::Message>::default_instance()
    }
}

impl Freq {
    pub fn new() -> Freq {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required double freq = 2;


    pub fn get_freq(&self) -> f64 {
        self.freq.unwrap_or(0.)
    }
    pub fn clear_freq(&mut self) {
        self.freq = ::std::option::Option::None;
    }

    pub fn has_freq(&self) -> bool {
        self.freq.is_some()
    }

    // Param is passed by value, moved
    pub fn set_freq(&mut self, v: f64) {
        self.freq = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Freq {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.freq.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.freq = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.freq {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.freq {
            os.write_double(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Freq {
        Freq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Freq| { &m.name },
                    |m: &mut Freq| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "freq",
                    |m: &Freq| { &m.freq },
                    |m: &mut Freq| { &mut m.freq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Freq>(
                    "Freq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Freq {
        static mut instance: ::protobuf::lazy::Lazy<Freq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Freq,
        };
        unsafe {
            instance.get(Freq::new)
        }
    }
}

impl ::protobuf::Clear for Freq {
    fn clear(&mut self) {
        self.name.clear();
        self.freq = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Freq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Freq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct MetricCumDistrMsg {
    // message fields
    freqs: ::protobuf::RepeatedField<Freq>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricCumDistrMsg {
    fn default() -> &'a MetricCumDistrMsg {
        <MetricCumDistrMsg as ::protobuf::Message>::default_instance()
    }
}

impl MetricCumDistrMsg {
    pub fn new() -> MetricCumDistrMsg {
        ::std::default::Default::default()
    }

    // repeated .analysis.Freq freqs = 1;


    pub fn get_freqs(&self) -> &[Freq] {
        &self.freqs
    }
    pub fn clear_freqs(&mut self) {
        self.freqs.clear();
    }

    // Param is passed by value, moved
    pub fn set_freqs(&mut self, v: ::protobuf::RepeatedField<Freq>) {
        self.freqs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_freqs(&mut self) -> &mut ::protobuf::RepeatedField<Freq> {
        &mut self.freqs
    }

    // Take field
    pub fn take_freqs(&mut self) -> ::protobuf::RepeatedField<Freq> {
        ::std::mem::replace(&mut self.freqs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MetricCumDistrMsg {
    fn is_initialized(&self) -> bool {
        for v in &self.freqs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.freqs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.freqs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.freqs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricCumDistrMsg {
        MetricCumDistrMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Freq>>(
                    "freqs",
                    |m: &MetricCumDistrMsg| { &m.freqs },
                    |m: &mut MetricCumDistrMsg| { &mut m.freqs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricCumDistrMsg>(
                    "MetricCumDistrMsg",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricCumDistrMsg {
        static mut instance: ::protobuf::lazy::Lazy<MetricCumDistrMsg> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricCumDistrMsg,
        };
        unsafe {
            instance.get(MetricCumDistrMsg::new)
        }
    }
}

impl ::protobuf::Clear for MetricCumDistrMsg {
    fn clear(&mut self) {
        self.freqs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricCumDistrMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricCumDistrMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Close {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Close {
    fn default() -> &'a Close {
        <Close as ::protobuf::Message>::default_instance()
    }
}

impl Close {
    pub fn new() -> Close {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Close {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Close {
        Close::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Close>(
                    "Close",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Close {
        static mut instance: ::protobuf::lazy::Lazy<Close> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Close,
        };
        unsafe {
            instance.get(Close::new)
        }
    }
}

impl ::protobuf::Clear for Close {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Close {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Close {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eanalysis.proto\x12\x08analysis\"*\n\x02IP\x12\x0e\n\x02ip\x18\x01\
    \x20\x01(\rR\x02ip\x12\x14\n\x05ports\x18\x02\x20\x01(\rR\x05ports\"\x8c\
    \x01\n\x08Protocol\x12\x0e\n\x02id\x18\x01\x20\x02(\tR\x02id\x12$\n\ract\
    iveMetrics\x18\x02\x20\x02(\rR\ractiveMetrics\x12$\n\x06client\x18\x03\
    \x20\x01(\x0b2\x0c.analysis.IPR\x06client\x12$\n\x06server\x18\x04\x20\
    \x01(\x0b2\x0c.analysis.IPR\x06server\"J\n\x06NetInt\x12\x0e\n\x02id\x18\
    \x01\x20\x02(\tR\x02id\x120\n\tprotocols\x18\x02\x20\x03(\x0b2\x12.analy\
    sis.ProtocolR\tprotocols\"j\n\x04Init\x12*\n\x07netInts\x18\x01\x20\x03(\
    \x0b2\x10.analysis.NetIntR\x07netInts\x12\x1a\n\x08interval\x18\x02\x20\
    \x02(\rR\x08interval\x12\x1a\n\x08duration\x18\x03\x20\x02(\rR\x08durati\
    on\"\xec\x06\n\x04Data\x12\x12\n\x04time\x18\x01\x20\x02(\x03R\x04time\
    \x12\x18\n\x07netInts\x18\x02\x20\x02(\tR\x07netInts\x12\x16\n\x06rstAvg\
    \x18\x03\x20\x01(\x01R\x06rstAvg\x12\x16\n\x06rstMin\x18\x04\x20\x01(\
    \x01R\x06rstMin\x12\x16\n\x06rstMax\x18\x05\x20\x01(\x01R\x06rstMax\x12\
    \x1c\n\trstClient\x18\x06\x20\x01(\x01R\trstClient\x12\x18\n\x07errRate\
    \x18\x07\x20\x01(\x01R\x07errRate\x12\x1e\n\nerrRateMin\x18\x08\x20\x01(\
    \x01R\nerrRateMin\x12\x1e\n\nerrRateMax\x18\t\x20\x01(\x01R\nerrRateMax\
    \x12$\n\rerrRateClient\x18\n\x20\x01(\x01R\rerrRateClient\x12\x18\n\x07r\
    eqRate\x18\x0b\x20\x01(\x01R\x07reqRate\x12\x1e\n\nreqRateMin\x18\x0c\
    \x20\x01(\x01R\nreqRateMin\x12\x1e\n\nreqRateMax\x18\r\x20\x01(\x01R\nre\
    qRateMax\x12$\n\rreqRateClient\x18\x0e\x20\x01(\x01R\rreqRateClient\x12\
    \x1a\n\x08connRate\x18\x0f\x20\x01(\x01R\x08connRate\x12\x20\n\x0bconnRa\
    teMin\x18\x10\x20\x01(\x01R\x0bconnRateMin\x12\x20\n\x0bconnRateMax\x18\
    \x11\x20\x01(\x01R\x0bconnRateMax\x12&\n\x06client\x18\x12\x20\x03(\x0b2\
    \x0e.analysis.FreqR\x06client\x12)\n\x08req_path\x18\x13\x20\x03(\x0b2\
    \x0e.analysis.FreqR\x07reqPath\x12-\n\nreq_method\x18\x14\x20\x03(\x0b2\
    \x0e.analysis.FreqR\treqMethod\x12)\n\x08req_type\x18\x15\x20\x03(\x0b2\
    \x0e.analysis.FreqR\x07reqType\x12-\n\nrsp_status\x18\x16\x20\x03(\x0b2\
    \x0e.analysis.FreqR\trspStatus\x12\x14\n\x05tpAvg\x18\x17\x20\x01(\x01R\
    \x05tpAvg\x12\x14\n\x05tpMin\x18\x18\x20\x01(\x01R\x05tpMin\x12\x14\n\
    \x05tpMax\x18\x19\x20\x01(\x01R\x05tpMax\x12\x1a\n\x08tpRevAvg\x18\x1a\
    \x20\x01(\x01R\x08tpRevAvg\x12\x1a\n\x08tpRevMin\x18\x1b\x20\x01(\x01R\
    \x08tpRevMin\x12\x1a\n\x08tpRevMax\x18\x1c\x20\x01(\x01R\x08tpRevMax\"\
    \xf2\x01\n\tMetricMsg\x12\x12\n\x04name\x18\x01\x20\x02(\tR\x04name\x12\
    \x12\n\x04time\x18\x02\x20\x02(\x03R\x04time\x12\x18\n\x07netInts\x18\
    \x03\x20\x02(\tR\x07netInts\x12\x1a\n\x08clientId\x18\x04\x20\x02(\x03R\
    \x08clientId\x126\n\tmetricAvg\x18\x05\x20\x01(\x0b2\x16.analysis.Metric\
    AvgMsgH\0R\tmetricAvg\x12E\n\x0emetricCumDistr\x18\x06\x20\x01(\x0b2\x1b\
    .analysis.MetricCumDistrMsgH\0R\x0emetricCumDistrB\x08\n\x06values\"D\n\
    \x0cMetricAvgMsg\x12\x10\n\x03avg\x18\x05\x20\x02(\x01R\x03avg\x12\x10\n\
    \x03min\x18\x06\x20\x02(\x01R\x03min\x12\x10\n\x03max\x18\x07\x20\x02(\
    \x01R\x03max\".\n\x04Freq\x12\x12\n\x04name\x18\x01\x20\x02(\tR\x04name\
    \x12\x12\n\x04freq\x18\x02\x20\x02(\x01R\x04freq\"9\n\x11MetricCumDistrM\
    sg\x12$\n\x05freqs\x18\x01\x20\x03(\x0b2\x0e.analysis.FreqR\x05freqs\"\
    \x07\n\x05Close\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
